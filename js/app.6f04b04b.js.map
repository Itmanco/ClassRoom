{"version":3,"file":"js/app.6f04b04b.js","mappings":"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","sources":["webpack://class_room/./src/App.vue","webpack://class_room/./src/components/ClassroomManager.vue","webpack://class_room/./src/components/MyClassroom.vue","webpack://class_room/./src/components/StudentDesk.vue","webpack://class_room/./src/components/StudentDesk.vue?33bf","webpack://class_room/./src/components/MyClassroom.vue?4c06","webpack://class_room/./src/firebase-init.js","webpack://class_room/./src/components/ClassroomManager.vue?a04a","webpack://class_room/./src/App.vue?7ccd","webpack://class_room/./src/main.js","webpack://class_room/webpack/bootstrap","webpack://class_room/webpack/runtime/chunk loaded","webpack://class_room/webpack/runtime/compat get default export","webpack://class_room/webpack/runtime/define property getters","webpack://class_room/webpack/runtime/global","webpack://class_room/webpack/runtime/hasOwnProperty shorthand","webpack://class_room/webpack/runtime/jsonp chunk loading","webpack://class_room/webpack/startup"],"sourcesContent":["<template>\r\n  <ClassroomManager />\r\n</template>\r\n\r\n<script>\r\nimport ClassroomManager from './components/ClassroomManager.vue';\r\n\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n    ClassroomManager\r\n  }\r\n};\r\n</script>","<template>\r\n  <div class=\"classroom-manager\">\r\n    <h1>教室の管理</h1>\r\n    <div class=\"tabs-container\">\r\n      <button\r\n        v-for=\"tab in tabs\"\r\n        :key=\"tab.id\"\r\n        @click=\"selectTab(tab.id)\"\r\n        :class=\"{ 'active-tab': tab.id === activeTabId, 'temporary-tab': tab.id === 'temp-randomized' }\"\r\n        :title=\"tab.title + ' (Created: ' + tab.creationDate + ')'\"\r\n      >\r\n        {{ tab.title }}\r\n      </button>\r\n    </div>\r\n      <div class=\"tabs-container action-buttons\">\r\n        <button @click=\"randomizeCurrentList\" >再編成する</button>\r\n        <button @click=\"saveAsNewTab\" :disabled=\"!currentTab\">選択内容を保存</button> \r\n      </div>\r\n           \r\n    \r\n\r\n    <MyClassroom\r\n      :desks=\"currentDeskLayout\"\r\n      :classroomTitle=\"currentTab ? currentTab.title : '教室のレイアウト'\"\r\n      v-if=\"currentDeskLayout.length > 0 && initialLoadComplete\"\r\n    />\r\n    <div v-else class=\"loading-message\">\r\n      教室のレイアウトを読み込み中．．．\r\n    </div>\r\n    <div class=\"tabs-container\">\r\n      <button @click=\"downloadCurrentTab\" :disabled=\"!currentTab\">Excelにダウンロード</button>\r\n    </div>\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MyClassroom from './MyClassroom.vue';\r\nimport { db, auth, authReadyPromise, appId } from '../firebase-init';\r\nimport { collection, doc, setDoc, onSnapshot, getDoc, getDocs } from 'firebase/firestore'; // Added getDocs\r\nimport * as XLSX from 'xlsx-js-style';\r\n\r\nexport default {\r\n  name: 'ClassroomManager',\r\n  components: {\r\n    MyClassroom\r\n  },\r\n  data() {\r\n    return {\r\n      masterStudentList: [], // セットアップに使用される初期リスト / Initial list used for setup\r\n      allStudentsMap: new Map(), // Firestoreの/studentsからロードされたIDをキーとする全生徒の詳細を格納する / Stores full student details keyed by ID, loaded from Firestore /students\r\n      tabs: [], // { id, title, creationDate, studentAssignments, deskLayout, firestoreDocId }の配列 / Array of { id, title, creationDate, studentAssignments, deskLayout, firestoreDocId }\r\n      activeTabId: null, // 現在選択されているタブのID / ID of the currently selected tab\r\n      emptyStudentPlaceholder: { id: 'empty-slot', name: '', hiragana: '', gender_id: 0, isEmpty: true }, // 空の座席用のプレースホルダーオブジェクト / Placeholder object for an empty desk slot\r\n      isFirestoreReady: false, // Firestoreが使用可能かを示すフラグ / Flag to indicate if Firestore is ready\r\n      initialLoadComplete: false, // 初期データロードが完了したかを示すフラグ / Flag to indicate if the initial data load is complete\r\n      masterListSaved: false, // マスターリストが最初に保存されたかどうかを示すフラグ / Flag to indicate if master list has been saved initially\r\n      // 以下のリストは初期データとして使用される / The following lists are used for initial data\r\n      c1: Object,\r\n      c2: Object,\r\n      c3: Object,\r\n      c4: Object\r\n    };\r\n  },\r\n  async created() {\r\n    // Firebase認証が準備されるのを待つ / Wait for Firebase authentication to be ready\r\n    await authReadyPromise;\r\n    this.isFirestoreReady = true;\r\n\r\n    // 最初に、全生徒のマスターリストをロードする / First, load the master list of all students\r\n    await this.loadMasterStudentList();\r\n\r\n    // マスターリストがロードされなかった場合、デフォルトを初期化して保存する / If no master student list was loaded, initialize a default one\r\n    if (this.masterStudentList.length === 0) {\r\n      console.log(\"No master student list found, initializing defaults.\");\r\n      this.initializeDefaultMasterStudentList();\r\n    } else {\r\n      this.masterStudentList.forEach(student => {\r\n        this.allStudentsMap.set(student.id, student);\r\n      });\r\n      this.masterListSaved = true;\r\n    }\r\n    \r\n    // 次に、既存の教室タブをロードする / Then, load existing classroom tabs\r\n    await this.loadTabsFromFirestore();\r\n    \r\n    this.initialLoadComplete = true;\r\n    if (this.tabs.length > 0 && !this.activeTabId) {\r\n      this.activeTabId = this.tabs[0].id;\r\n    }\r\n  },\r\n  computed: {\r\n    // 現在アクティブなタブの完全なデータオブジェクトを返す / Returns the full data object for the currently active tab\r\n    currentTab() {\r\n      return this.tabs.find(tab => tab.id === this.activeTabId) || null;\r\n    },\r\n    // 現在アクティブなタブの座席レイアウト配列を返す / Returns the desk layout array of the active tab\r\n    currentDeskLayout() {\r\n      return this.currentTab ? this.currentTab.deskLayout : [];\r\n    }\r\n  },\r\n  methods: {\r\n    /**\r\n     * デフォルトのマスター生徒リストを初期化する。 / Initializes the default master student list.\r\n     * `isActive`プロパティを追加しました。 / Added `isActive` property.\r\n     */\r\n    initializeDefaultMasterStudentList() {\r\n      this.masterStudentList = [\r\n        { id: 2, name: \"熱田\", hiragana: \"あつた\", gender_id: 2, isActive: true },\r\n        { id: 3, name: \"大塚\", hiragana: \"おおつか\", gender_id: 1, isActive: true },\r\n        { id: 4, name: \"岡田\", hiragana: \"おかだ\", gender_id: 2, isActive: true },\r\n        { id: 5, name: \"河井\", hiragana: \"かわい\", gender_id: 1, isActive: true },\r\n        { id: 6, name: \"川口\", hiragana: \"かわぐち\", gender_id: 2, isActive: true },\r\n        { id: 7, name: \"川田\", hiragana: \"かわた\", gender_id: 2, isActive: true },\r\n        { id: 8, name: \"MOTTA\", hiragana: \"もった\", gender_id: 1, isActive: true },\r\n        { id: 9, name: \"里舘\", hiragana: \"さとだて\", gender_id: 1, isActive: true },\r\n        { id: 10, name: \"塩田\", hiragana: \"しおた\", gender_id: 1, isActive: true },\r\n        { id: 11, name: \"新岡\", hiragana: \"にいおか\", gender_id: 1, isActive: true },\r\n        { id: 12, name: \"樋口\", hiragana: \"ひぐち\", gender_id: 2, isActive: true },\r\n        { id: 13, name: \"堀口\", hiragana: \"ほりぐち\", gender_id: 2, isActive: false },\r\n        { id: 14, name: \"松井\", hiragana: \"まつい\", gender_id: 1, isActive: true }, \r\n        { id: 15, name: \"松川\", hiragana: \"まつかわ\", gender_id: 1, isActive: true },\r\n        { id: 16, name: \"水上\", hiragana: \"みずかみ\", gender_id: 2, isActive: true },\r\n        { id: 17, name: \"宮澤\", hiragana: \"みやざわ\", gender_id: 1, isActive: true }, \r\n        { id: 18, name: \"山角\", hiragana: \"やまかど\", gender_id: 1, isActive: true }, \r\n        { id: 19, name: \"山田\", hiragana: \"やまだ\", gender_id: 1, isActive: true }, \r\n      ];\r\n\r\n            // c1, c2, c3リストも初期データとして定義されている / c1, c2, and c3 lists are also defined as initial data\r\n      this.c1 = {\r\n        creationDate: \"2025年5月22日\",\r\n        studentAssignments: [        \r\n        { studentId: 16, deskNumber: 1 },\r\n        { studentId: 3, deskNumber: 1 },\r\n        { studentId: 15, deskNumber: 2 },\r\n        { studentId: 7, deskNumber: 2 },\r\n        { studentId: 10, deskNumber: 3 },\r\n        { studentId: 5, deskNumber: 3 },\r\n        { studentId: 14, deskNumber: 4 },\r\n        { studentId: 11, deskNumber: 4 },\r\n        { studentId: 19, deskNumber: 5 },\r\n        { studentId: 18, deskNumber: 5 },\r\n        { studentId: 17, deskNumber: 6 },\r\n        { studentId: 6, deskNumber: 6 },\r\n        { studentId: 8, deskNumber: 7 },\r\n        { studentId: 9, deskNumber: 7 },\r\n        { studentId: 2, deskNumber: 8 },\r\n        { studentId: 4, deskNumber: 8 },\r\n        { studentId: 13, deskNumber: 9 },\r\n        { studentId: 12, deskNumber: 9 }\r\n        ],\r\n        title: \"一第\"\r\n      };\r\n\r\n        // { id: 16, name: \"水上\", hiragana: \"みずかみ\", gender_id: 2 },\r\n        // { id: 3, name: \"大塚\", hiragana: \"おおつか\", gender_id: 1 },\r\n        // { id: 15, name: \"松川\", hiragana: \"まつかわ\", gender_id: 1 },\r\n        // { id: 7, name: \"川田\", hiragana: \"かわた\", gender_id: 2 },\r\n        // { id: 10, name: \"塩田\", hiragana: \"しおた\", gender_id: 1 },\r\n        // { id: 5, name: \"河井\", hiragana: \"かわい\", gender_id: 1 },\r\n        // { id: 14, name: \"松井\", hiragana: \"まつい\", gender_id: 1 }, \r\n        // { id: 11, name: \"新岡\", hiragana: \"にいおか\", gender_id: 1 },\r\n        // { id: 19, name: \"山田\", hiragana: \"やまだ\", gender_id: 1 },\r\n        // { id: 18, name: \"山角\", hiragana: \"やまかど\", gender_id: 1 },\r\n        // { id: 17, name: \"宮澤\", hiragana: \"みやざわ\", gender_id: 1 }, \r\n        // { id: 6, name: \"川口\", hiragana: \"かわぐち\", gender_id: 2 },\r\n        // { id: 8, name: \"MOTTA\", hiragana: \"もった\", gender_id: 1 },\r\n        // { id: 9, name: \"里舘\", hiragana: \"さとだて\", gender_id: 1 },\r\n        // { id: 2, name: \"熱田\", hiragana: \"あつた\", gender_id: 2 },\r\n        // { id: 4, name: \"岡田\", hiragana: \"おかだ\", gender_id: 2 },\r\n        // { id: 13, name: \"堀口\", hiragana: \"ほりぐち\", gender_id: 2 },  \r\n        // { id: 12, name: \"樋口\", hiragana: \"ひぐち\", gender_id: 2 }\r\n      \r\n      this.c2 = {\r\n        creationDate: \"2025年7月7日\",\r\n        studentAssignments: [\r\n          { studentId: 13, deskNumber: 1 },\r\n          { studentId: 10, deskNumber: 1 },\r\n          { studentId: 8, deskNumber: 2 },\r\n          { studentId: 6, deskNumber: 2 },\r\n          { studentId: 11, deskNumber: 3 },\r\n          { studentId: 19, deskNumber: 3 },\r\n          { studentId: 9, deskNumber: 4 },\r\n          { studentId: 18, deskNumber: 4 },\r\n          { studentId: 3, deskNumber: 5 },\r\n          { studentId: 17, deskNumber: 5 },\r\n          { studentId: 12, deskNumber: 6 },\r\n          { studentId: 2, deskNumber: 6 },\r\n          { studentId: 4, deskNumber: 7 },\r\n          { studentId: 5, deskNumber: 7 },\r\n          { studentId: 15, deskNumber: 8 },\r\n          { studentId: 14, deskNumber: 8 },\r\n          { studentId: 16, deskNumber: 9 },\r\n          { studentId: 7, deskNumber: 9 }\r\n        ],\r\n        title: \"二第\"\r\n      };\r\n      // this.c2List = [\r\n      //   { id: 13, name: \"堀口\", hiragana: \"ほりぐち\", gender_id: 2 },\r\n      //   { id: 10, name: \"塩田\", hiragana: \"しおた\", gender_id: 1 },\r\n      //   { id: 8, name: \"MOTTA\", hiragana: \"もった\", gender_id: 1 },\r\n      //   { id: 6, name: \"川口\", hiragana: \"かわぐち\", gender_id: 2 },\r\n      //   { id: 11, name: \"新岡\", hiragana: \"にいおか\", gender_id: 1 },\r\n      //   { id: 19, name: \"山田\", hiragana: \"やまだ\", gender_id: 1 },\r\n      //   { id: 9, name: \"里舘\", hiragana: \"さとだて\", gender_id: 1 },\r\n      //   { id: 18, name: \"山角\", hiragana: \"やまかど\", gender_id: 1 },\r\n      //   { id: 3, name: \"大塚\", hiragana: \"おおつか\", gender_id: 1 },\r\n      //   { id: 17, name: \"宮澤\", hiragana: \"みやざわ\", gender_id: 1 },\r\n      //   { id: 12, name: \"樋口\", hiragana: \"ひぐち\", gender_id: 2 }, \r\n      //   { id: 2, name: \"熱田\", hiragana: \"あつた\", gender_id: 2 }, \r\n      //   { id: 4, name: \"岡田\", hiragana: \"おかだ\", gender_id: 2 },\r\n      //   { id: 5, name: \"河井\", hiragana: \"かわい\", gender_id: 1 },\r\n      //   { id: 15, name: \"松川\", hiragana: \"まつかわ\", gender_id: 1 },\r\n      //   { id: 14, name: \"松井\", hiragana: \"まつい\", gender_id: 1 },\r\n      //   { id: 16, name: \"水上\", hiragana: \"みずかみ\", gender_id: 2 },\r\n      //   { id: 7, name: \"川田\", hiragana: \"かわた\", gender_id: 2 }\r\n      // ];\r\n\r\n      this.c3 = {\r\n        creationDate: \"2025年7月30日\",\r\n        studentAssignments: [\r\n          { studentId: 4, deskNumber: 1 },\r\n          { studentId: 8, deskNumber: 1 },\r\n          { studentId: 5, deskNumber: 2 },\r\n          { studentId: 15, deskNumber: 2 },\r\n          { studentId: 17, deskNumber: 3 },\r\n          { studentId: 2, deskNumber: 3 },\r\n          { studentId: 18, deskNumber: 4 },\r\n          { studentId: 10, deskNumber: 4 },\r\n          { studentId: 7, deskNumber: 5 },\r\n          { studentId: 12, deskNumber: 5 },\r\n          { studentId: 11, deskNumber: 6 },\r\n          { studentId: 9, deskNumber: 6 },\r\n          { studentId: 6, deskNumber: 7 },\r\n          { studentId: 14, deskNumber: 7 },\r\n          { studentId: 3, deskNumber: 8 },\r\n          { studentId: 19, deskNumber: 8 },\r\n          { studentId: 16, deskNumber: 9 },\r\n        ],\r\n        title: \"三第\"\r\n      };\r\n\r\n      // this.c3List = [\r\n      //   { id: 4, name: \"岡田\", hiragana: \"おかだ\", gender_id: 2 },\r\n      //   { id: 8, name: \"MOTTA\", hiragana: \"もった\", gender_id: 1 },  \r\n      //   { id: 5, name: \"河井\", hiragana: \"かわい\", gender_id: 1 },\r\n      //   { id: 15, name: \"松川\", hiragana: \"まつかわ\", gender_id: 1 },  \r\n      //   { id: 17, name: \"宮澤\", hiragana: \"みやざわ\", gender_id: 1 },\r\n      //   { id: 2, name: \"熱田\", hiragana: \"あつた\", gender_id: 2 },\r\n      //   { id: 18, name: \"山角\", hiragana: \"やまかど\", gender_id: 1 },\r\n      //   { id: 10, name: \"塩田\", hiragana: \"しおた\", gender_id: 1 },\r\n      //   { id: 7, name: \"川田\", hiragana: \"かわた\", gender_id: 2 },\r\n      //   { id: 12, name: \"樋口\", hiragana: \"ひぐち\", gender_id: 2 },\r\n      //   { id: 11, name: \"新岡\", hiragana: \"にいおか\", gender_id: 1 },\r\n      //   { id: 9, name: \"里舘\", hiragana: \"さとだて\", gender_id: 1 },\r\n\r\n      //   { id: 6, name: \"川口\", hiragana: \"かわぐち\", gender_id: 2 },\r\n      //   { id: 14, name: \"松井\", hiragana: \"まつい\", gender_id: 1 },\r\n      //   { id: 3, name: \"大塚\", hiragana: \"おおつか\", gender_id: 1 },\r\n      //   { id: 19, name: \"山田\", hiragana: \"やまだ\", gender_id: 1 },\r\n      //   { id: 16, name: \"水上\", hiragana: \"みずかみ\", gender_id: 2 }\r\n      // ];\r\n\r\n      this.c4 = {\r\n        creationDate: \"2025年8月22日\",\r\n        studentAssignments: [\r\n          { studentId: 12, deskNumber: 1 },\r\n          { studentId: 17, deskNumber: 1 },\r\n          { studentId: 19, deskNumber: 2 },\r\n          { studentId: 10, deskNumber: 2 },\r\n          { studentId: 4, deskNumber: 3 },\r\n          { studentId: 18, deskNumber: 3 },\r\n          { studentId: 16, deskNumber: 4 },\r\n          { studentId: 2, deskNumber: 4 },\r\n          { studentId: 11, deskNumber: 5 },\r\n          { studentId: 5, deskNumber: 5 },\r\n          { studentId: 14, deskNumber: 6 },\r\n          { studentId: 8, deskNumber: 6 },\r\n          { studentId: 15, deskNumber: 7 },\r\n          { studentId: 3, deskNumber: 7 },\r\n          { studentId: 7, deskNumber: 8 },\r\n          { studentId: 6, deskNumber: 8 },\r\n          { studentId: 9, deskNumber: 9 },\r\n        ],\r\n        title: \"四第\"\r\n      };\r\n\r\n      // this.c4List = [\r\n      //   { id: 12, name: \"樋口\", hiragana: \"ひぐち\", gender_id: 2 },\r\n      //   { id: 17, name: \"宮澤\", hiragana: \"みやざわ\", gender_id: 1 },\r\n      //   { id: 19, name: \"山田\", hiragana: \"やまだ\", gender_id: 1 },\r\n      //   { id: 10, name: \"塩田\", hiragana: \"しおた\", gender_id: 1 },\r\n      //   { id: 4, name: \"岡田\", hiragana: \"おかだ\", gender_id: 2 },\r\n      //   { id: 18, name: \"山角\", hiragana: \"やまかど\", gender_id: 1 },\r\n      //   { id: 16, name: \"水上\", hiragana: \"みずかみ\", gender_id: 2 },\r\n      //   { id: 2, name: \"熱田\", hiragana: \"あつた\", gender_id: 2 },\r\n      //   { id: 11, name: \"新岡\", hiragana: \"にいおか\", gender_id: 1 },\r\n      //   { id: 5, name: \"河井\", hiragana: \"かわい\", gender_id: 1 },\r\n      //   { id: 14, name: \"松井\", hiragana: \"まつい\", gender_id: 1 },\r\n      //   { id: 8, name: \"MOTTA\", hiragana: \"もった\", gender_id: 1 },        \r\n      //   { id: 15, name: \"松川\", hiragana: \"まつかわ\", gender_id: 1 },\r\n      //   { id: 3, name: \"大塚\", hiragana: \"おおつか\", gender_id: 1 },\r\n      //   { id: 7, name: \"川田\", hiragana: \"かわた\", gender_id: 2 },\r\n      //   { id: 6, name: \"川口\", hiragana: \"かわぐち\", gender_id: 2 },        \r\n      //   { id: 9, name: \"里舘\", hiragana: \"さとだて\", gender_id: 1 }\r\n      // ];\r\n\r\n      this.masterStudentList.forEach(student => {\r\n        this.allStudentsMap.set(student.id, student);\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Firestoreに初期のmasterStudentListと事前定義されたレイアウトを永続化する。 / Persists the initial master student list and predefined layouts to Firestore.\r\n     * `isActive`プロパティもFirestoreに保存されます。 / The `isActive` property is now also saved to Firestore.\r\n     */\r\n    async saveMasterStudentListInit() {\r\n      if (!auth.currentUser || !this.isFirestoreReady) {\r\n        console.warn(\"Firestore not ready or user not authenticated, cannot save.\");\r\n        return;\r\n      }\r\n      if (this.masterListSaved) {\r\n        alert(\"マスター学生リストはすでに保存されています。\");\r\n        return;\r\n      }\r\n\r\n      const studentsCollectionRef = collection(db, `artifacts/${appId}/students`);\r\n\r\n      try {\r\n        for (const student of this.masterStudentList) {\r\n          await setDoc(doc(studentsCollectionRef, String(student.id)), {\r\n            name: student.name,\r\n            hiragana: student.hiragana,\r\n            gender_id: student.gender_id,\r\n            isActive: student.isActive // 新しいプロパティを追加しました / Added the new property\r\n          });\r\n        }\r\n        console.log(\"Master student list successfully saved to /students collection.\");\r\n\r\n        // `classrooms`コレクションが空の場合、cListを保存する / If the `classrooms` collection is empty, save the cLists\r\n        const classroomsCollectionRef = collection(db, `artifacts/${appId}/classrooms`);\r\n        const classroomsSnapshot = await getDocs(classroomsCollectionRef);\r\n        \r\n        if (classroomsSnapshot.empty) {\r\n            console.log(\"No classroom tabs found. Creating initial layouts from cLists.\");\r\n            \r\n            const initialLists = [\r\n                { title: this.c1.title, studentAssignments: this.c1.studentAssignments, creationDate:this.c1.creationDate },\r\n                { title: this.c2.title, studentAssignments: this.c2.studentAssignments, creationDate:this.c2.creationDate },\r\n                { title: this.c3.title, studentAssignments: this.c3.studentAssignments, creationDate:this.c3.creationDate },\r\n                { title: this.c4.title, studentAssignments: this.c4.studentAssignments, creationDate:this.c4.creationDate }\r\n            ];\r\n\r\n            for (const { title, list } of initialLists) {\r\n                await this.addTab(title, list, true);\r\n            }\r\n            console.log(\"Initial cLists successfully saved as tabs.\");\r\n        }\r\n\r\n        alert(\"マスター学生リストがFirestoreに保存されました。\");\r\n        this.masterListSaved = true;\r\n      } catch (e) {\r\n        console.error(\"Error saving master student list:\", e);\r\n        alert(\"マスター学生リストの保存中にエラーが発生しました。\");\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Firestoreの/studentsコレクションからマスター生徒リストをロードする。 / Loads the master student list from Firestore's /students collection.\r\n     */\r\n    async loadMasterStudentList() {\r\n      if (!auth.currentUser || !this.isFirestoreReady) {\r\n        console.warn(\"Firestore not ready or user not authenticated, cannot load master list.\");\r\n        return;\r\n      }\r\n      const studentsCollectionRef = collection(db, `artifacts/${appId}/students`);\r\n\r\n      try {\r\n        onSnapshot(studentsCollectionRef, (querySnapshot) => {\r\n          const loadedStudents = [];\r\n          const tempStudentMap = new Map();\r\n          querySnapshot.forEach((doc) => {\r\n            const studentData = { id: parseInt(doc.id), ...doc.data() };\r\n            loadedStudents.push(studentData);\r\n            tempStudentMap.set(studentData.id, studentData);\r\n          });\r\n          this.masterStudentList = loadedStudents;\r\n          this.allStudentsMap = tempStudentMap;\r\n          console.log(\"Master student list loaded from Firestore.\");\r\n          if (loadedStudents.length > 0) {\r\n            this.masterListSaved = true;\r\n          }\r\n        }, (error) => {\r\n          console.error(\"Error listening to master student list from Firestore:\", error);\r\n        });\r\n      } catch (e) {\r\n        console.error(\"Error setting up Firestore listener:\", e);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Fisher-Yatesアルゴリズムを使用して配列をシャッフルする。 / Shuffles an array using the Fisher-Yates algorithm.\r\n     * @param {Array} array - シャッフルする配列。 / The array to shuffle.\r\n     * @returns {Array} シャッフルされた配列。 / The shuffled array.\r\n     */\r\n    shuffleArray(array) {\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n      }\r\n      return array;\r\n    },\r\n\r\n    /**\r\n     * 生徒を固定された数の座席（9）に割り当て、空のスロットを埋める。 / Assigns students to a fixed number of desks (9), padding with empty slots.\r\n     * このメソッドは、事前に座席番号が割り当てられている可能性のある生徒のリストを期待する。 / This method expects a list of students with potentially pre-assigned deskNumbers.\r\n     * @param {Array} studentList - 生徒オブジェクトのリスト（deskNumberがある場合とない場合）。 / The list of student objects (with or without deskNumber).\r\n     * @returns {Object} deskLayoutと更新されたstudentsWithDeskNumbersを含むオブジェクト。 / An object containing deskLayout and updated studentsWithDeskNumbers.\r\n     */\r\n    assignStudentsToDesks(studentList) {\r\n      const numDesks = 9;\r\n      const desks = Array.from({ length: numDesks }, (_, i) => ({\r\n        id: `desk-${i + 1}`,\r\n        name: `${i + 1}`,\r\n        students: []\r\n      }));\r\n\r\n      const studentsToAssign = studentList.map(s => ({ ...s })); \r\n      \r\n      const preAssignedStudentsMap = new Map();\r\n      studentsToAssign.forEach(student => {\r\n        if (student.deskNumber && !student.isEmpty) {\r\n          if (!preAssignedStudentsMap.has(student.deskNumber)) {\r\n            preAssignedStudentsMap.set(student.deskNumber, []);\r\n          }\r\n          preAssignedStudentsMap.get(student.deskNumber).push(student);\r\n        }\r\n      });\r\n\r\n      const placedStudentIds = new Set();\r\n      \r\n      preAssignedStudentsMap.forEach((studentsAtDesk, deskNumber) => {\r\n        const deskIndex = deskNumber - 1;\r\n        if (desks[deskIndex]) {\r\n          for (let k = 0; k < Math.min(studentsAtDesk.length, 2); k++) {\r\n            desks[deskIndex].students.push(studentsAtDesk[k]);\r\n            placedStudentIds.add(studentsAtDesk[k].id);\r\n          }\r\n        }\r\n      });\r\n\r\n      const unassignedStudents = studentsToAssign.filter(s => !placedStudentIds.has(s.id));\r\n      let unassignedIndex = 0;\r\n\r\n      desks.forEach(desk => {\r\n        while (desk.students.length < 2) {\r\n          if (unassignedIndex < unassignedStudents.length) {\r\n            const student = unassignedStudents[unassignedIndex++];\r\n            student.deskNumber = parseInt(desk.name);\r\n            desk.students.push(student);\r\n            placedStudentIds.add(student.id);\r\n          } else {\r\n            desk.students.push({ ...this.emptyStudentPlaceholder, id: `empty-${desk.name}-${desk.students.length + 1}` });\r\n          }\r\n        }\r\n      });\r\n\r\n      const studentsWithDeskNumbers = desks.flatMap(desk => \r\n        desk.students.filter(s => !s.isEmpty)\r\n      );\r\n\r\n      return {\r\n        deskLayout: desks,\r\n        studentsWithDeskNumbers: studentsWithDeskNumbers\r\n      };\r\n    },\r\n\r\n    /**\r\n     * 指定された属性を持つ新しいタブを追加し、その座席レイアウトを生成する。 / Adds a new tab with specified attributes and generates its desk layout.\r\n     * オプションで、すぐにFirestoreに保存する。 / Optionally saves to Firestore immediately.\r\n     * @param {string} title - 新しいタブのタイトル。 / The title of the new tab.\r\n     * @param {Array} studentsArray - このレイアウトの生徒の順序付きリスト（完全な生徒オブジェクト）。 / The ordered list of students for this layout (full student objects).\r\n     * @param {boolean} autoSave - すぐにFirestoreに保存するかどうか。 / Whether to save to Firestore immediately.\r\n     */\r\n    async addTab(title, studentsArray, autoSave = false) {\r\n      const newTabId = this.tabs.length > 0 ? Math.max(...this.tabs.map(t => t.id)) + 1 : 1;\r\n      const creationDate = new Date().toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' });\r\n      \r\n      const { deskLayout, studentsWithDeskNumbers } = this.assignStudentsToDesks(studentsArray);\r\n\r\n      const studentAssignments = studentsWithDeskNumbers.map(s => ({\r\n        studentId: s.id,\r\n        deskNumber: s.deskNumber\r\n      }));\r\n\r\n      const newTab = {\r\n        id: newTabId,\r\n        title: title,\r\n        creationDate: creationDate,\r\n        studentAssignments: studentAssignments,\r\n        deskLayout: deskLayout,\r\n        firestoreDocId: null\r\n      };\r\n\r\n      this.tabs.push(newTab);\r\n      this.tabs.sort((a, b) => a.id - b.id);\r\n      if (autoSave && this.isFirestoreReady) {\r\n        const docRefId = await this.saveTabToFirestore(newTab);\r\n        newTab.firestoreDocId = docRefId;\r\n      }\r\n    },\r\n\r\n    async randomizeCurrentList() {\r\n      if (!this.currentTab) {\r\n        console.warn(\"No active tab selected. Cannot randomize.\");\r\n        return;\r\n      }\r\n\r\n      const studentsToRandomize = this.currentTab.deskLayout.flatMap(desk => \r\n        desk.students.filter(s => !s.isEmpty)\r\n      );\r\n\r\n      const historicalTabs = this.tabs.filter(tab => tab.id !== this.currentTab.id);\r\n      const { studentsByDesk, deskmates } = this.getHistoricalData(historicalTabs);\r\n\r\n      const availableDesks = Array.from({ length: 9 }, (_, i) => i + 1);\r\n      const newStudentAssignments = [];\r\n      const assignedStudentIds = new Set();\r\n      \r\n      this.shuffleArray(studentsToRandomize);\r\n\r\n      for (const deskNumber of availableDesks) {\r\n        const deskStudents = [];\r\n        while (deskStudents.length < 2 && studentsToRandomize.length > 0) {\r\n          const studentToPlace = this.findValidStudent(\r\n            studentsToRandomize, \r\n            deskNumber, \r\n            deskStudents, \r\n            studentsByDesk, \r\n            deskmates, \r\n            assignedStudentIds\r\n          );\r\n          \r\n          if (studentToPlace) {\r\n            deskStudents.push(studentToPlace);\r\n            assignedStudentIds.add(studentToPlace.id);\r\n            studentsToRandomize.splice(studentsToRandomize.findIndex(s => s.id === studentToPlace.id), 1);\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n      \r\n        deskStudents.forEach(s => {\r\n          if (!s.isEmpty) {\r\n            newStudentAssignments.push({ studentId: s.id, deskNumber: deskNumber });\r\n          }\r\n        });\r\n      }\r\n\r\n      const tempTabId = 'temp-randomized';\r\n      const creationDate = new Date().toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' });\r\n      const newTitle = `おすすめの順番`;\r\n\r\n      const rehydratedStudents = newStudentAssignments.map(assignment => ({\r\n        id: assignment.studentId,\r\n        deskNumber: assignment.deskNumber,\r\n        ...this.allStudentsMap.get(assignment.studentId)\r\n      }));\r\n      \r\n      const { deskLayout, studentsWithDeskNumbers } = this.assignStudentsToDesks(rehydratedStudents);\r\n      \r\n      const newTempTab = {\r\n        id: tempTabId,\r\n        title: newTitle,\r\n        creationDate: creationDate,\r\n        studentAssignments: studentsWithDeskNumbers.map(s => ({ studentId: s.id, deskNumber: s.deskNumber })),\r\n        deskLayout: deskLayout,\r\n        firestoreDocId: null\r\n      };\r\n\r\n      const existingTempIndex = this.tabs.findIndex(t => t.id === tempTabId);\r\n      if (existingTempIndex !== -1) {\r\n        this.tabs.splice(existingTempIndex, 1);\r\n      }\r\n      \r\n      this.tabs.push(newTempTab);\r\n\r\n      this.tabs.sort((a, b) => {\r\n        if (a.id === tempTabId) return 1;\r\n        if (b.id === tempTabId) return -1;\r\n        return a.id - b.id;\r\n      });\r\n\r\n      this.activeTabId = tempTabId;\r\n    },\r\n\r\n    /**\r\n     * 履歴的な配置と同級生を考慮して、特定の座席に適した生徒を見つける。 / Finds a valid student for a given desk, considering historical placements and deskmates.\r\n     */\r\n    findValidStudent(allStudents, deskNumber, currentDeskmates, studentsByDesk, deskmates, assignedStudentIds) {\r\n      const shuffledStudents = this.shuffleArray([...allStudents]);\r\n\r\n      for (const student of shuffledStudents) {\r\n        const studentId = student.id;\r\n\r\n        // 生徒がアクティブでない場合はスキップする / Skip student if they are not active\r\n        if (student.isActive === false) {\r\n          continue;\r\n        }\r\n        \r\n        if (assignedStudentIds.has(studentId)) {\r\n          continue;\r\n        }\r\n        \r\n        const previousDesks = studentsByDesk.get(studentId) || new Set();\r\n        if (previousDesks.has(String(deskNumber))) {\r\n          continue;\r\n        }\r\n        \r\n        let isValidDeskmate = true;\r\n        const previousDeskmates = deskmates.get(studentId) || new Set();\r\n        for (const deskmate of currentDeskmates) {\r\n          if (previousDeskmates.has(deskmate.id)) {\r\n            isValidDeskmate = false;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        if (isValidDeskmate) {\r\n          return student;\r\n        }\r\n      }\r\n      \r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * 現在アクティブなタブのレイアウトを新しいタブとして保存する。 / Saves the current active tab's layout as a new tab.\r\n     */\r\n    async saveAsNewTab() {\r\n      if (!this.masterStudentList.length > 0) {\r\n        alert(\"まず、マスター学生リストを保存してください。\");\r\n        return;\r\n      }\r\n      \r\n      const studentsToSave = this.currentTab \r\n        ? this.currentTab.deskLayout.flatMap(desk => desk.students.filter(s => !s.isEmpty))\r\n        : [...this.masterStudentList];\r\n\r\n      const newTitle = `${this.convertToKanji(this.tabs.length)} 第`;\r\n\r\n      await this.addTab(newTitle, studentsToSave, true);\r\n      this.selectTab(this.tabs[this.tabs.length - 1].id);\r\n    },\r\n\r\n    /**\r\n     * IDでタブを選択する。 / Selects a tab by its ID.\r\n     * @param {number} id - 選択するタブのID。 / The ID of the tab to select.\r\n     */\r\n    selectTab(id) {\r\n      this.activeTabId = id;\r\n    },\r\n\r\n    /**\r\n     * タブのデータをFirestoreに保存する。 / Saves a tab's data to Firestore.\r\n     * @param {Object} tabData - 保存するタブオブジェクト。 / The tab object to save.\r\n     * @param {string} [docId] - オプションのFirestoreドキュメントID。指定しない場合は新しく生成される。 / Optional Firestore document ID. If not provided, a new one is generated.\r\n     * @returns {string} FirestoreドキュメントID。 / The Firestore document ID.\r\n     */\r\n    async saveTabToFirestore(tabData, docId = null) {\r\n      if (!auth.currentUser || !this.isFirestoreReady) { \r\n        console.warn(\"Firestore not ready or user not authenticated, cannot save.\");\r\n        return null;\r\n      }\r\n      const collectionRef = collection(db, `artifacts/${appId}/classrooms`);\r\n\r\n      try {\r\n        let docRef;\r\n        if (docId) {\r\n          docRef = doc(collectionRef, docId);\r\n        } else {\r\n          docRef = doc(collectionRef); \r\n          tabData.id = docRef.id; \r\n        }\r\n\r\n        await setDoc(docRef, {\r\n          title: tabData.title,\r\n          creationDate: tabData.creationDate,\r\n          studentAssignments: tabData.studentAssignments\r\n        });\r\n        console.log(\"Classroom layout document successfully written with ID: \", docRef.id);\r\n        return docRef.id;\r\n      } catch (e) {\r\n        console.error(\"Error writing document to Firestore: \", e);\r\n        return null;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Firestoreからタブをリアルタイムでロードし、生徒データを再水和する。 / Loads tabs from Firestore in real-time and rehydrates student data.\r\n     */\r\n    async loadTabsFromFirestore() {\r\n      if (!auth.currentUser || !this.isFirestoreReady) { \r\n        console.warn(\"Firestore not ready or user not authenticated, cannot load tabs.\");\r\n        return;\r\n      }\r\n      const collectionRef = collection(db, `artifacts/${appId}/classrooms`);\r\n\r\n      try {\r\n        onSnapshot(collectionRef, async (querySnapshot) => {\r\n          const loadedTabsData = [];\r\n          const studentIdsToFetch = new Set();\r\n          \r\n          querySnapshot.forEach((doc) => {\r\n            const data = doc.data();\r\n            const assignments = Array.isArray(data.studentAssignments) ? data.studentAssignments : [];\r\n\r\n            assignments.forEach(assignment => {\r\n              if (assignment.studentId) {\r\n                studentIdsToFetch.add(assignment.studentId);\r\n              }\r\n            });\r\n\r\n            loadedTabsData.push({\r\n              id: doc.id,\r\n              title: data.title,\r\n              creationDate: data.creationDate,\r\n              studentAssignments: assignments,\r\n              deskLayout: [],\r\n              firestoreDocId: doc.id\r\n            });\r\n          });\r\n\r\n          const fetchedStudentsMap = new Map();\r\n          if (studentIdsToFetch.size > 0) {\r\n            const studentDocPromises = Array.from(studentIdsToFetch).map(id => \r\n              getDoc(doc(db, `artifacts/${appId}/students`, String(id)))\r\n            );\r\n            const studentDocs = await Promise.all(studentDocPromises);\r\n            studentDocs.forEach(docSnap => {\r\n              if (docSnap.exists()) {\r\n                const studentData = { id: parseInt(docSnap.id), ...docSnap.data() };\r\n                fetchedStudentsMap.set(studentData.id, studentData);\r\n              }\r\n            });\r\n          }\r\n          \r\n          this.tabs = loadedTabsData.map(tab => {\r\n            const rehydratedStudents = tab.studentAssignments.map(assignment => {\r\n              const fullStudentData = fetchedStudentsMap.get(assignment.studentId);\r\n              if (fullStudentData) {\r\n                return {\r\n                  ...fullStudentData,\r\n                  deskNumber: assignment.deskNumber\r\n                };\r\n              }\r\n              return { ...this.emptyStudentPlaceholder, id: `missing-student-${assignment.studentId}` };\r\n            }).filter(s => !s.isEmpty);\r\n            \r\n            const { deskLayout, studentsWithDeskNumbers } = this.assignStudentsToDesks(rehydratedStudents);\r\n            \r\n            return {\r\n              ...tab,\r\n              studentAssignments: studentsWithDeskNumbers.map(s => ({ studentId: s.id, deskNumber: s.deskNumber })),\r\n              deskLayout: deskLayout\r\n            };\r\n          });\r\n\r\n          this.tabs.sort((a, b) => a.id - b.id);\r\n\r\n          if (this.initialLoadComplete && this.tabs.length > 0 && !this.tabs.some(t => t.id === this.activeTabId)) {\r\n            this.activeTabId = this.tabs[0].id;\r\n          } else if (this.tabs.length > 0 && !this.activeTabId) {\r\n            this.activeTabId = this.tabs[0].id;\r\n          } else if (this.tabs.length === 0) {\r\n            this.activeTabId = null;\r\n          }\r\n          console.log(\"Tabs loaded/updated from Firestore.\");\r\n        }, (error) => {\r\n          console.error(\"Error listening to tabs from Firestore:\", error);\r\n        });\r\n      } catch (e) {\r\n        console.error(\"Error setting up Firestore listener:\", e);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * タブが1つもないかを確認する。ない場合は、初期の「基本順序」タブを作成する。 / Checks if there are any tabs. If not, creates the initial \"Current State\" tab.\r\n     */\r\n    addInitialTabs() {\r\n      if (this.tabs.length === 0 && this.masterStudentList.length > 0) {\r\n        console.log(\"No classroom tabs found. Creating initial layouts.\");\r\n        \r\n        this.addTab('基本順序', [...this.masterStudentList], true); // 自動保存する / true for auto-save\r\n        \r\n      }\r\n    },\r\n\r\n    /**\r\n     * 既存のタブから以前の座席とペアの割り当てをすべて取得する。 / Retrieves all previous desk and deskmate assignments from existing tabs.\r\n     * @returns {Object} 2つのMapを含むオブジェクト: / An object containing two Maps:\r\n     * - studentsByDesk: { studentId: Set<deskNumber> }\r\n     * - deskmates: { studentId: Set<deskmateId> }\r\n     */\r\n    getHistoricalData(tabsArray = this.tabs) {\r\n      const studentsByDesk = new Map();\r\n      const deskmates = new Map();\r\n\r\n      tabsArray.forEach(tab => {\r\n        tab.deskLayout.forEach(desk => {\r\n          const studentIds = desk.students.map(s => s.id).filter(id => id !== 'empty-slot');\r\n          \r\n          studentIds.forEach(studentId => {\r\n            if (!studentsByDesk.has(studentId)) {\r\n              studentsByDesk.set(studentId, new Set());\r\n            }\r\n            studentsByDesk.get(studentId).add(desk.name);\r\n          });\r\n\r\n          if (studentIds.length === 2) {\r\n            const [student1, student2] = studentIds;\r\n            if (!deskmates.has(student1)) {\r\n              deskmates.set(student1, new Set());\r\n            }\r\n            if (!deskmates.has(student2)) {\r\n              deskmates.set(student2, new Set());\r\n            }\r\n            deskmates.get(student1).add(student2);\r\n            deskmates.get(student2).add(student1);\r\n          }\r\n        });\r\n      });\r\n\r\n      return { studentsByDesk, deskmates };\r\n    },\r\n      \r\n    convertToKanji(num){\r\n      const kanjiMap = [\r\n        '零', '一', '二', '三', '四', '五', '六', '七', '八', '九',\r\n        '十', '十一', '十二', '十三', '十四', '十五', '十六', '十七', '十八', '十九'\r\n      ];\r\n      if (num >= 0 && num < kanjiMap.length) {\r\n        return kanjiMap[num];\r\n      } else {\r\n        return num.toString();\r\n      }\r\n    },\r\n    \r\n    dateShortFormat(dateString) {\r\n      // Split the string by '年', '月', and '日' to get the numeric parts.\r\n      const parts = dateString.split(/年|月|日/).filter(Boolean);\r\n\r\n      // Extract the month and day parts.\r\n      const month = parts[1];\r\n      const day = parts[2];\r\n\r\n      // Combine the two-digit month and day.\r\n      const formattedDate = month.padStart(2, '0') + day.padStart(2, '0');\r\n\r\n      return formattedDate;\r\n    },\r\n\r\n    /**\r\n     * 現在のタブの座席レイアウトをExcelファイルとしてダウンロードします。\r\n     * このメソッドは、教師の視点からのレイアウト（提供された画像）を再現します。\r\n     *\r\n     * @English\r\n     * Downloads the current tab's seating layout as an Excel file.\r\n     * This method replicates the teacher's perspective layout by\r\n     * reordering desks and students.\r\n     */\r\n    downloadCurrentTab() {\r\n      if (!this.currentTab || !this.currentTab.deskLayout) {\r\n        alert(\"ダウンロードする教室のタブを選択してください。\");\r\n        return;\r\n      }\r\n\r\n      const desks = this.currentTab.deskLayout;\r\n      const totalDeskRows = 5;\r\n\r\n      const getStudent = (deskNumber, studentIndex) => {\r\n        const desk = desks.find(d => d.name === deskNumber.toString());\r\n        return desk && desk.students.length > studentIndex ? desk.students[studentIndex] : null;\r\n      };\r\n\r\n      const formatStudentData = (student) => {\r\n        if (!student) return '';\r\n        return `${student.name || ''}\\n${student.hiragana || ''}`;\r\n      };\r\n\r\n      // Create a master data array with the correct dimensions and fill it with empty strings\r\n      // 新しい空白の列のために、7列で配列を初期化します\r\n      // Initialize array with 7 columns for the new blank column\r\n      const masterData = Array(totalDeskRows + 2).fill().map(() => Array(7).fill(''));\r\n\r\n      desks.forEach(desk => {\r\n        const deskNumber = parseInt(desk.name);\r\n        let newCol1 = -1, newCol2 = -1;\r\n        let newRow = -1;\r\n\r\n        const originalRowIndex = Math.floor((deskNumber - 1) / 2);\r\n        newRow = totalDeskRows - 1 - originalRowIndex;\r\n\r\n        if (deskNumber % 2 !== 0) {\r\n          // 右ブロックの列を1つ右にずらします\r\n          // Shift right block columns one to the right\r\n          newCol1 = 5; // ExcelのF列 (以前のE列)\r\n          newCol2 = 6; // ExcelのG列 (以前のF列)\r\n        } else {\r\n          // 左ブロックの列を1つ右にずらします\r\n          // Shift left block columns one to the right\r\n          newCol1 = 1; // ExcelのB列 (以前のA列)\r\n          newCol2 = 2; // ExcelのC列 (以前のB列)\r\n        }\r\n\r\n        if (desk.students[0]) {\r\n          masterData[newRow][newCol2] = formatStudentData(desk.students[0]);\r\n        }\r\n        if (desk.students[1]) {\r\n          masterData[newRow][newCol1] = formatStudentData(desk.students[1]);\r\n        }\r\n      });\r\n\r\n      // ラベルの列を右に1つずらします\r\n      // Shift label columns one to the right\r\n      masterData[totalDeskRows + 1][1] = 'K09 ' + this.dateShortFormat(this.currentTab.creationDate);\r\n      masterData[totalDeskRows + 1][5] = '講師席';\r\n\r\n      const worksheet = XLSX.utils.aoa_to_sheet(masterData);\r\n\r\n      const cellStyle = {\r\n        alignment: { vertical: 'center', horizontal: 'center', wrapText: true },\r\n        border: {\r\n          top: { style: 'thin' },\r\n          bottom: { style: 'thin' },\r\n          left: { style: 'thin' },\r\n          right: { style: 'thin' }\r\n        },\r\n        font: {\r\n          sz: 14\r\n        }\r\n      };\r\n\r\n      // K09コード専用のカスタムスタイル（フォントサイズ16）。\r\n      // Custom style for the K09 code cell (font size 16).\r\n      const codeCellStyle = {\r\n          font: {          \r\n            sz: 16 // フォントサイズを16に増やす\r\n        }\r\n      };\r\n\r\n      worksheet['!pageSetup'] = { orientation: 'landscape' };\r\n\r\n      // 新しい空白のA列の幅を追加し、他の列のインデックスを更新します\r\n      // Add width for the new blank column A and update other column indices\r\n      worksheet['!cols'] = [\r\n        { wch: 4 }, // New blank column A\r\n        { wch: 23 }, { wch: 23 }, // B, C - Left block\r\n        { wch: 2 }, { wch: 2 }, // D, E - Spacer\r\n        { wch: 23 }, { wch: 23 } // F, G - Right block\r\n      ];\r\n      \r\n      // Set row heights for multi-line cells\r\n      // 複数行のセルのために行の高さを設定\r\n      worksheet['!rows'] = Array(masterData.length).fill({ hpt: 70 });\r\n      \r\n      // Reduce the height of the instructor row at the bottom\r\n      // 下部の講師席の行の高さを減らす\r\n      if (worksheet['!rows'][totalDeskRows + 1]) {\r\n          worksheet['!rows'][totalDeskRows + 1] = { hpt: 20 };\r\n      }\r\n\r\n      // ループの列インデックスを更新します\r\n      // Update the column indices for the loop\r\n      const studentCols = [1, 2, 5, 6];\r\n      for (let r = 0; r < totalDeskRows; r++) {\r\n        for (const c of studentCols) {\r\n          const cellAddress = XLSX.utils.encode_cell({ r: r, c: c });\r\n          if (worksheet[cellAddress] && worksheet[cellAddress].v) {\r\n            if (!worksheet[cellAddress].s) worksheet[cellAddress].s = {};\r\n            Object.assign(worksheet[cellAddress].s, cellStyle);\r\n          }\r\n        }\r\n      }\r\n\r\n      // B7セルのアドレスを取得し、カスタムスタイルを適用します。\r\n      // Get the cell address for B7 and apply the custom style.\r\n      const codeCellAddress = XLSX.utils.encode_cell({ r: totalDeskRows + 1, c: 1 });\r\n      if (worksheet[codeCellAddress]) {\r\n        if (!worksheet[codeCellAddress].s) worksheet[codeCellAddress].s = {};\r\n        Object.assign(worksheet[codeCellAddress].s, codeCellStyle);\r\n      }\r\n\r\n\r\n      // // 講師席のセルのインデックスを更新します\r\n      // // Update the index for the instructor cell\r\n      const instructorCellAddress = XLSX.utils.encode_cell({ r: totalDeskRows + 1, c: 5 });\r\n      if (worksheet[instructorCellAddress]) {\r\n        if (!worksheet[instructorCellAddress].s) worksheet[instructorCellAddress].s = {};\r\n        Object.assign(worksheet[instructorCellAddress].s, cellStyle);\r\n      }\r\n\r\n      // マージするセルのインデックスを更新します\r\n      // Update merge indices to new position\r\n      // if (!worksheet['!merges']) worksheet['!merges'] = [];\r\n      // worksheet['!merges'].push({ s: { r: totalDeskRows + 1, c: 5 }, e: { r: totalDeskRows + 1, c: 6 } });\r\n\r\n      const workbook = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(workbook, worksheet, '座席表');\r\n\r\n      const file_options = {\r\n        pageSetup: {\r\n          orientation: \"landscape\"\r\n        }\r\n      };\r\n\r\n      const fileName = `${this.currentTab.title}_座席表.xlsx`;\r\n      XLSX.writeFile(workbook, fileName, file_options);\r\n    }\r\n\r\n   \r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* スタイルは変更されていないため、コメントは不要です。 / Styles have not been changed, so comments are not necessary. */\r\n.classroom-manager {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  font-family: sans-serif;\r\n  min-width: 320px;\r\n}\r\n\r\nh1 {\r\n  margin-bottom: 30px;\r\n  color: #333;\r\n}\r\n\r\n.tabs-container {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  justify-content: center;\r\n  max-width: 100%;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.tabs-container button {\r\n  padding: 8px 15px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  background-color: #f0f0f0;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.tabs-container button:hover:not(.active-tab) {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.tabs-container button.active-tab {\r\n  background-color: #007bff;\r\n  color: white;\r\n  border-color: #007bff;\r\n  font-weight: bold;\r\n}\r\n\r\n.tabs-container button:disabled {\r\n  opacity: 0.6;\r\n  cursor: not-allowed;\r\n  background-color: #f8f9fa;\r\n  color: #6c757d;\r\n}\r\n\r\n.tabs-container button.temporary-tab {\r\n  background-color: #f0ad4e; /* Orange background */\r\n  border-color: #eea236;\r\n  color: white;\r\n}\r\n\r\n.tabs-container button.temporary-tab.active-tab {\r\n  background-color: #ec971f; /* A darker shade for the active state */\r\n  border-color: #d58512;\r\n  color: white;\r\n}\r\n\r\n.loading-message {\r\n  margin-top: 50px;\r\n  font-style: italic;\r\n  color: #666;\r\n}\r\n</style>","<template>\r\n  <div class=\"my-classroom\">\r\n    <h2>{{ classroomTitle }}</h2>\r\n    <div class=\"whiteboard\"></div>\r\n    <div class=\"desks-container\">\r\n      <div\r\n        class=\"desk-row\"\r\n        v-for=\"(row, rowIndex) in deskRows\"\r\n        :key=\"rowIndex\"\r\n      >\r\n        <StudentDesk\r\n          v-for=\"(desk, deskIndex) in row\"\r\n          :key=\"desk.id || deskIndex\"\r\n          :deskName=\"desk.name\"\r\n          :students=\"desk.students\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport StudentDesk from './StudentDesk.vue';\r\n\r\nexport default {\r\n  name: 'MyClassroom',\r\n  components: {\r\n    StudentDesk\r\n  },\r\n  props: {\r\n    desks: { // 親コンポーネントから座席の配列を受け取るプロパティ。 / A prop that receives an array of desks from the parent component.\r\n      type: Array,\r\n      default: () => [] // デフォルトは空の配列。 / Defaults to an empty array.\r\n    },\r\n    classroomTitle: { // 親コンポーネントから教室のタイトルを受け取るプロパティ。 / A prop that receives the classroom's title from the parent component.\r\n      type: String,\r\n      default: '教室のレイアウト' // デフォルト値。 / A default value is set.\r\n    }\r\n  },\r\n  computed: {\r\n    /**\r\n     * `desks`プロパティから座席を2つずつの行に分割して返す計算プロパティ。 / A computed property that splits the desks from the `desks` prop into rows of two.\r\n     * これにより、UIのレイアウトが簡素化される。 / This simplifies the layout for the UI.\r\n     * @returns {Array} 2つずつに分割された座席の配列。 / An array of desk arrays, each containing two desks.\r\n     */\r\n    deskRows() {\r\n      const rows = [];\r\n      const desksToProcess = this.desks; // プロパティを直接使用する。 / Use the prop directly.\r\n      for (let i = 0; i < desksToProcess.length; i += 2) {\r\n        rows.push(desksToProcess.slice(i, i + 2));\r\n      }\r\n      return rows;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* スタイルはレイアウトの表示を担当する。 / Styles are responsible for displaying the layout. */\r\n.my-classroom {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  font-family: sans-serif;\r\n  min-width: 320px;\r\n}\r\n\r\nh2 {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.whiteboard {\r\n  width: 80%;\r\n  height:3px;\r\n  background-color: #eee;\r\n  border: 2px solid #000;\r\n  margin-bottom: 30px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.5em;\r\n  font-weight: bold;\r\n}\r\n\r\n.desks-container {\r\n  width: 100%;\r\n  max-width: 420px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n}\r\n\r\n.desk-row {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  flex-wrap: nowrap;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n</style>","<template>\r\n  <div class=\"desk\" :class=\"{ 'single-student-desk': students.length === 1 && students[0].isEmpty === false }\">\r\n    <div\r\n      class=\"student\"\r\n      v-for=\"student in students\"\r\n      :key=\"student.id\"\r\n      @click=\"!student.isEmpty ? toggleStudentInfo(student.id) : null\"\r\n      :class=\"['gender-' + student.gender_id, { 'is-empty': student.isEmpty }]\"\r\n    >\r\n      <div v-if=\"student.isEmpty\" class=\"empty-chair-placeholder\">\r\n        </div>\r\n      <div v-else-if=\"selectedStudentId === student.id\" class=\"student-info-details\">\r\n        <p><strong>{{ student.name }}</strong> </p>\r\n        <p>{{ student.hiragana }}</p>\r\n      </div>\r\n      <div\r\n        v-else\r\n        class=\"student-initial\"\r\n        :class=\"{ 'font-small': student.name.length > 3 }\"\r\n      >\r\n        {{ student.name }}\r\n      </div>\r\n    </div>\r\n    <div class=\"desk-name\">{{ deskName }}</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'StudentDesk', // コンポーネントの名前を定義する。 / Defines the component's name.\r\n  props: {\r\n    deskName: { // 座席の番号または名前を受け取るプロパティ。 / A prop that receives the desk's number or name.\r\n      type: String,\r\n      required: true // このプロパティは必須。 / This prop is required.\r\n    },\r\n    students: { // 座席に座っている生徒の配列を受け取るプロパティ。 / A prop that receives an array of students at the desk.\r\n      type: Array,\r\n      default: () => [] // デフォルトは空の配列。 / Defaults to an empty array.\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      selectedStudentId: null // 詳細を表示するために現在選択されている生徒のIDを追跡する。 / Tracks the ID of the currently selected student to display their details.\r\n    };\r\n  },\r\n  methods: {\r\n    /**\r\n     * 生徒のクリックを処理し、詳細情報の表示を切り替えるメソッド。 / A method that handles a student's click and toggles the display of their detailed information.\r\n     * @param {number} id - クリックされた生徒のID。 / The ID of the clicked student.\r\n     */\r\n    toggleStudentInfo(id) {\r\n      // 選択されたIDが現在のIDと同じであればnullにリセットし、そうでなければ新しいIDに設定する。 / If the selected ID is the same as the current ID, reset it to null; otherwise, set it to the new ID.\r\n      this.selectedStudentId = this.selectedStudentId === id ? null : id;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* スタイルは座席と生徒の表示を制御する。 / Styles control the display of the desk and students. */\r\n.desk {\r\n  display: flex;\r\n  justify-content: center; /* デフォルト：生徒を中央に配置 / Default: centers students */\r\n  align-items: center;\r\n  width: 150px;\r\n  height: 100px;\r\n  border: 2px solid #333;\r\n  border-radius: 8px;\r\n  position: relative;\r\n  margin: 10px 30px; \r\n}\r\n\r\n/* 1人の「実際の」生徒がいる座席に適用されるスタイル。生徒を左に配置する。 / Style applied to desks with one *actual* student. It aligns the student to the left. */\r\n.desk.single-student-desk {\r\n  justify-content: flex-start; /* コンテンツを左に配置する / Aligns content to the left */\r\n  padding-left: 15px; /* ボーダーに触れないようにパディングを追加する / Add some padding to prevent it from touching the border */\r\n}\r\n\r\n.student {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 70px;\r\n  height: 70px;\r\n  background-color: #f0f0f0;\r\n  border: 1px solid #ccc;\r\n  border-radius: 50%;\r\n  margin: 0 10px;\r\n  font-weight: bold;\r\n  font-size: 1em;\r\n  position: relative;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  padding: 2px;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* 空の座席用のスタイル / Styles for empty chairs */\r\n.student.is-empty {\r\n  background-color: #e9ecef; /* 明るい背景色 / Lighter background */\r\n  border-style: dashed; /* 破線ボーダー / Dashed border */\r\n  border-color: #adb5bd; /* グレーのボーダー / Grayer border */\r\n  cursor: not-allowed; /* 禁止カーソル / No-entry cursor */\r\n  opacity: 0.7; /* 少し透明にする / Slightly faded */\r\n  pointer-events: none; /* クリックイベントを無効にする / Disables click events */\r\n}\r\n\r\n.student:hover:not(.is-empty) { /* 空でない場合にのみホバーを適用する / Apply hover only if not empty */\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n/* 性別ごとのホバー時の光彩（空でない場合のみ） / Gender-specific hover glow, only if not empty */\r\n.student.gender-1:hover:not(.is-empty) {\r\n  box-shadow: 0 0 15px 5px rgb(190, 213, 236); \r\n}\r\n\r\n.student.gender-2:hover:not(.is-empty) {\r\n  box-shadow: 0 0 15px 5px rgba(221, 151, 138, 0.81);\r\n}\r\n\r\n.empty-chair-placeholder {\r\n  font-size: 0.6em;\r\n  color: #6c757d;\r\n}\r\n\r\n.student-initial {\r\n  text-align: center;\r\n}\r\n\r\n.student-initial.font-small {\r\n  font-size: 0.8em;\r\n}\r\n\r\n.student-info-details {\r\n  font-size: 0.7em;\r\n  font-weight: normal;\r\n  line-height: 1.2;\r\n  word-break: break-all;\r\n}\r\n\r\n.student-info-details p {\r\n  margin: 0;\r\n}\r\n\r\n.desk-name {\r\n  position: absolute;\r\n  bottom: -20px;\r\n  font-size: 0.8em;\r\n  color: #555;\r\n}\r\n</style>","import { render } from \"./StudentDesk.vue?vue&type=template&id=139845cd&scoped=true\"\nimport script from \"./StudentDesk.vue?vue&type=script&lang=js\"\nexport * from \"./StudentDesk.vue?vue&type=script&lang=js\"\n\nimport \"./StudentDesk.vue?vue&type=style&index=0&id=139845cd&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-139845cd\"]])\n\nexport default __exports__","import { render } from \"./MyClassroom.vue?vue&type=template&id=ba4df9a4&scoped=true\"\nimport script from \"./MyClassroom.vue?vue&type=script&lang=js\"\nexport * from \"./MyClassroom.vue?vue&type=script&lang=js\"\n\nimport \"./MyClassroom.vue?vue&type=style&index=0&id=ba4df9a4&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-ba4df9a4\"]])\n\nexport default __exports__","// src/firebase-init.js\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\n\r\n// Conditionally use global Canvas variables or .env variables\r\nconst firebaseConfig = typeof __firebase_config !== 'undefined'\r\n  ? JSON.parse(__firebase_config)\r\n  : {\r\n      apiKey: process.env.VUE_APP_FIREBASE_API_KEY,\r\n      authDomain: process.env.VUE_APP_FIREBASE_AUTH_DOMAIN,\r\n      projectId: process.env.VUE_APP_FIREBASE_PROJECT_ID,\r\n      storageBucket: process.env.VUE_APP_FIREBASE_STORAGE_BUCKET,\r\n      messagingSenderId: process.env.VUE_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n      appId: process.env.VUE_APP_FIREBASE_APP_ID // This is for client-side use\r\n    };\r\n\r\nconst initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\r\n\r\n// __app_id is primarily for Firestore pathing in Canvas. For local dev,\r\n// you might derive it from projectId or use a hardcoded value if needed.\r\nconst appId = typeof __app_id !== 'undefined' ? __app_id : process.env.VUE_APP_FIREBASE_PROJECT_ID || 'default-local-app-id';\r\n\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\n\r\nlet authReadyPromise = new Promise(resolve => {\r\n  onAuthStateChanged(auth, async (user) => {\r\n    if (user) {\r\n      console.log(\"Firebase authenticated. User ID:\", user.uid);\r\n      resolve(user.uid);\r\n    } else {\r\n      try {\r\n        if (initialAuthToken) {\r\n          await signInWithCustomToken(auth, initialAuthToken);\r\n        } else {\r\n          await signInAnonymously(auth);\r\n        }\r\n        console.log(\"Firebase auth attempt complete.\");\r\n        resolve(auth.currentUser ? auth.currentUser.uid : null);\r\n      } catch (error) {\r\n        console.error(\"Firebase authentication failed:\", error);\r\n        resolve(null);\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\nexport { db, auth, authReadyPromise, appId };\r\n","import { render } from \"./ClassroomManager.vue?vue&type=template&id=6f0eee44&scoped=true\"\nimport script from \"./ClassroomManager.vue?vue&type=script&lang=js\"\nexport * from \"./ClassroomManager.vue?vue&type=script&lang=js\"\n\nimport \"./ClassroomManager.vue?vue&type=style&index=0&id=6f0eee44&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-6f0eee44\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=13d21367\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\r\nimport { createApp } from 'vue';\r\nimport App from './App.vue';\r\n\r\ncreateApp(App).mount('#app');\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkclass_room\"] = self[\"webpackChunkclass_room\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(543); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createBlock","_component_ClassroomManager","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","tabs","tab","key","id","onClick","$event","$options","selectTab","_normalizeClass","activeTabId","title","creationDate","_hoisted_3","_hoisted_4","_cache","args","randomizeCurrentList","saveAsNewTab","disabled","currentTab","_hoisted_5","currentDeskLayout","length","initialLoadComplete","_component_MyClassroom","desks","classroomTitle","_hoisted_6","_hoisted_7","downloadCurrentTab","_hoisted_8","_toDisplayString","$props","deskRows","row","rowIndex","desk","deskIndex","_component_StudentDesk","deskName","name","students","isEmpty","student","gender_id","toggleStudentInfo","selectedStudentId","hiragana","props","type","String","required","Array","default","data","methods","this","__exports__","components","StudentDesk","computed","rows","desksToProcess","i","push","slice","firebaseConfig","__firebase_config","JSON","parse","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","initialAuthToken","__initial_auth_token","__app_id","app","initializeApp","auth","getAuth","db","getFirestore","authReadyPromise","Promise","resolve","onAuthStateChanged","async","user","console","log","uid","signInWithCustomToken","signInAnonymously","currentUser","error","MyClassroom","masterStudentList","allStudentsMap","Map","emptyStudentPlaceholder","isFirestoreReady","masterListSaved","c1","Object","c2","c3","c4","created","loadMasterStudentList","initializeDefaultMasterStudentList","forEach","set","loadTabsFromFirestore","find","deskLayout","isActive","studentAssignments","studentId","deskNumber","saveMasterStudentListInit","warn","alert","studentsCollectionRef","collection","setDoc","doc","classroomsCollectionRef","classroomsSnapshot","getDocs","empty","initialLists","list","addTab","e","onSnapshot","querySnapshot","loadedStudents","tempStudentMap","studentData","parseInt","shuffleArray","array","j","Math","floor","random","assignStudentsToDesks","studentList","numDesks","from","_","studentsToAssign","map","s","preAssignedStudentsMap","has","get","placedStudentIds","Set","studentsAtDesk","k","min","add","unassignedStudents","filter","unassignedIndex","studentsWithDeskNumbers","flatMap","studentsArray","autoSave","newTabId","max","t","Date","toLocaleDateString","year","month","day","newTab","firestoreDocId","sort","a","b","docRefId","saveTabToFirestore","studentsToRandomize","historicalTabs","studentsByDesk","deskmates","getHistoricalData","availableDesks","newStudentAssignments","assignedStudentIds","deskStudents","studentToPlace","findValidStudent","splice","findIndex","tempTabId","newTitle","rehydratedStudents","assignment","newTempTab","existingTempIndex","allStudents","currentDeskmates","shuffledStudents","previousDesks","isValidDeskmate","previousDeskmates","deskmate","studentsToSave","convertToKanji","tabData","docId","collectionRef","docRef","loadedTabsData","studentIdsToFetch","assignments","isArray","fetchedStudentsMap","size","studentDocPromises","getDoc","studentDocs","all","docSnap","exists","fullStudentData","some","addInitialTabs","tabsArray","studentIds","student1","student2","num","kanjiMap","toString","dateShortFormat","dateString","parts","split","Boolean","formattedDate","padStart","totalDeskRows","formatStudentData","masterData","fill","newCol1","newCol2","newRow","originalRowIndex","worksheet","XLSX","aoa_to_sheet","cellStyle","alignment","vertical","horizontal","wrapText","border","top","style","bottom","left","right","font","sz","codeCellStyle","orientation","wch","hpt","studentCols","r","c","cellAddress","encode_cell","v","assign","codeCellAddress","instructorCellAddress","workbook","book_new","book_append_sheet","file_options","pageSetup","fileName","ClassroomManager","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","keys","every","n","getter","__esModule","d","definition","o","defineProperty","enumerable","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}