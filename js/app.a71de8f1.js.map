{"version":3,"file":"js/app.a71de8f1.js","mappings":"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","sources":["webpack://class_room/./src/App.vue","webpack://class_room/./src/components/ClassroomManager.vue","webpack://class_room/./src/components/MyClassroom.vue","webpack://class_room/./src/components/StudentDesk.vue","webpack://class_room/./src/components/StudentDesk.vue?33bf","webpack://class_room/./src/components/MyClassroom.vue?4c06","webpack://class_room/./src/firebase-init.js","webpack://class_room/./src/components/ClassroomManager.vue?a04a","webpack://class_room/./src/App.vue?7ccd","webpack://class_room/./src/main.js","webpack://class_room/webpack/bootstrap","webpack://class_room/webpack/runtime/chunk loaded","webpack://class_room/webpack/runtime/compat get default export","webpack://class_room/webpack/runtime/define property getters","webpack://class_room/webpack/runtime/global","webpack://class_room/webpack/runtime/hasOwnProperty shorthand","webpack://class_room/webpack/runtime/jsonp chunk loading","webpack://class_room/webpack/startup"],"sourcesContent":["<template>\n  <ClassroomManager />\n</template>\n\n<script>\nimport ClassroomManager from './components/ClassroomManager.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    ClassroomManager\n  }\n};\n</script>","<template>\r\n  <div class=\"classroom-manager\">\r\n    <h1>教室の管理</h1>\r\n    <div class=\"tabs-container\">\r\n      <button\r\n        v-for=\"tab in tabs\"\r\n        :key=\"tab.id\"\r\n        @click=\"selectTab(tab.id)\"\r\n        :class=\"{ 'active-tab': tab.id === activeTabId }\"\r\n        :title=\"tab.title + ' (Created: ' + tab.creationDate + ')'\"\r\n      >\r\n        {{ tab.title }}\r\n      </button>\r\n      <button @click=\"randomizeCurrentList\" >再編成する</button>\r\n      <button @click=\"saveAsNewTab\" :disabled=\"!currentTab\">新しい組織を決定する</button>\r\n    </div>\r\n\r\n    <MyClassroom\r\n      :desks=\"currentDeskLayout\"\r\n      :classroomTitle=\"currentTab ? currentTab.title : '教室のレイアウト'\"\r\n      v-if=\"currentDeskLayout.length > 0 && initialLoadComplete\"\r\n    />\r\n    <div v-else class=\"loading-message\">\r\n      教室のレイアウトを読み込み中．．．\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MyClassroom from './MyClassroom.vue';\r\nimport { db, auth, authReadyPromise, appId } from '../firebase-init';\r\nimport { collection, doc, setDoc, onSnapshot, getDoc } from 'firebase/firestore'; // Added getDoc\r\n\r\nexport default {\r\n  name: 'ClassroomManager',\r\n  components: {\r\n    MyClassroom\r\n  },\r\n  data() {\r\n    return {\r\n      masterStudentList: [], // セットアップに使用される初期リスト / Initial list used for setup\r\n      allStudentsMap: new Map(), // Firestoreの/studentsからロードされたIDをキーとする全生徒の詳細を格納する / Stores full student details keyed by ID, loaded from Firestore /students\r\n      tabs: [], // { id, title, creationDate, studentAssignments, deskLayout, firestoreDocId }の配列 / Array of { id, title, creationDate, studentAssignments, deskLayout, firestoreDocId }\r\n      activeTabId: null, // 現在選択されているタブのID / ID of the currently selected tab\r\n      emptyStudentPlaceholder: { id: 'empty-slot', name: '', hiragana: '', gender_id: 0, isEmpty: true }, // 空の座席用のプレースホルダーオブジェクト / Placeholder object for an empty desk slot\r\n      isFirestoreReady: false, // Firestoreが使用可能かを示すフラグ / Flag to indicate if Firestore is ready\r\n      initialLoadComplete: false, // 初期データロードが完了したかを示すフラグ / Flag to indicate if the initial data load is complete\r\n      masterListSaved: false, // マスターリストが最初に保存されたかどうかを示すフラグ / Flag to indicate if master list has been saved initially\r\n      // 以下のリストは初期データとして使用される / The following lists are used for initial data\r\n      c1List: [],\r\n      c2List: [],\r\n      c3List: []\r\n    };\r\n  },\r\n  async created() {\r\n    // Firebase認証が準備されるのを待つ / Wait for Firebase authentication to be ready\r\n    await authReadyPromise;\r\n    this.isFirestoreReady = true;\r\n\r\n    // 最初に、全生徒のマスターリストをロードする / First, load the master list of all students\r\n    await this.loadMasterStudentList();\r\n\r\n    // マスターリストがロードされなかった場合、デフォルトを初期化して保存する / If no master student list was loaded, initialize a default one\r\n    if (this.masterStudentList.length === 0) {\r\n      console.log(\"No master student list found, initializing defaults.\");\r\n      this.initializeDefaultMasterStudentList();\r\n    } else {\r\n      this.masterStudentList.forEach(student => {\r\n        this.allStudentsMap.set(student.id, student);\r\n      });\r\n      this.masterListSaved = true;\r\n    }\r\n    \r\n    // 次に、既存の教室タブをロードする / Then, load existing classroom tabs\r\n    await this.loadTabsFromFirestore();\r\n    \r\n    this.initialLoadComplete = true;\r\n    if (this.tabs.length > 0 && !this.activeTabId) {\r\n      this.activeTabId = this.tabs[0].id;\r\n    }\r\n  },\r\n  computed: {\r\n    // 現在アクティブなタブの完全なデータオブジェクトを返す / Returns the full data object for the currently active tab\r\n    currentTab() {\r\n      return this.tabs.find(tab => tab.id === this.activeTabId) || null;\r\n    },\r\n    // 現在アクティブなタブの座席レイアウト配列を返す / Returns the desk layout array of the active tab\r\n    currentDeskLayout() {\r\n      return this.currentTab ? this.currentTab.deskLayout : [];\r\n    }\r\n  },\r\n  methods: {\r\n    /**\r\n     * デフォルトのマスター生徒リストを初期化する。 / Initializes the default master student list.\r\n     * このデータは、後でFirestoreに永続化される。 / This data will then be persisted to Firestore in a separate collection.\r\n     */\r\n    initializeDefaultMasterStudentList() {\r\n      this.masterStudentList = [\r\n        { id: 2, name: \"熱田\", hiragana: \"あつた\", gender_id: 2 },\r\n        { id: 3, name: \"大塚\", hiragana: \"おおつか\", gender_id: 1 },\r\n        { id: 4, name: \"岡田\", hiragana: \"おかだ\", gender_id: 2 },\r\n        { id: 5, name: \"河井\", hiragana: \"かわい\", gender_id: 1 },\r\n        { id: 6, name: \"川口\", hiragana: \"かわぐち\", gender_id: 2 },\r\n        { id: 7, name: \"川田\", hiragana: \"かわた\", gender_id: 2 },\r\n        { id: 8, name: \"MOTTA\", hiragana: \"もった\", gender_id: 1 },\r\n        { id: 9, name: \"里舘\", hiragana: \"さとだて\", gender_id: 1 },\r\n        { id: 10, name: \"塩田\", hiragana: \"しおた\", gender_id: 1 },\r\n        { id: 11, name: \"新岡\", hiragana: \"にいおか\", gender_id: 1 },\r\n        { id: 12, name: \"樋口\", hiragana: \"ひぐち\", gender_id: 2 },\r\n        { id: 13, name: \"堀口\", hiragana: \"ほりぐち\", gender_id: 2 },\r\n        { id: 14, name: \"松井\", hiragana: \"まつい\", gender_id: 1 },         \r\n        { id: 15, name: \"松川\", hiragana: \"まつかわ\", gender_id: 1 },\r\n        { id: 16, name: \"水上\", hiragana: \"みずかみ\", gender_id: 2 },\r\n        { id: 17, name: \"宮澤\", hiragana: \"みやざわ\", gender_id: 1 },         \r\n        { id: 18, name: \"山角\", hiragana: \"やまかど\", gender_id: 1 },         \r\n        { id: 19, name: \"山田\", hiragana: \"やまだ\", gender_id: 1 },       \r\n      ];\r\n\r\n      // c1, c2, c3リストも初期データとして定義されている / c1, c2, and c3 lists are also defined as initial data\r\n      this.c1List = [ /* ... */ ];\r\n      this.c2List = [ /* ... */ ];\r\n      this.c3List = [ /* ... */ ];\r\n\r\n      // 新しく初期化されたリストからallStudentsMapを作成 / Populate allStudentsMap from this newly initialized list\r\n      this.masterStudentList.forEach(student => {\r\n        this.allStudentsMap.set(student.id, student);\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Firestoreに初期のmasterStudentListを永続化するワンタイムメソッド。 / One-time method to persist the initial masterStudentList to Firestore.\r\n     * 各生徒が/studentsコレクションのドキュメントになる。 / Each student becomes a document in the /students collection.\r\n     */\r\n    async saveMasterStudentListInit() {\r\n      if (!auth.currentUser || !this.isFirestoreReady) {\r\n        console.warn(\"Firestore not ready or user not authenticated, cannot save.\");\r\n        return;\r\n      }\r\n      if (this.masterListSaved) {\r\n        alert(\"マスター学生リストはすでに保存されています。\");\r\n        return;\r\n      }\r\n\r\n      const studentsCollectionRef = collection(db, `artifacts/${appId}/students`);\r\n\r\n      try {\r\n        for (const student of this.masterStudentList) {\r\n          // student.idをドキュメントIDとして使用する / Use student.id as the document ID\r\n          await setDoc(doc(studentsCollectionRef, String(student.id)), { // IDを文字列に変換 / Convert ID to string\r\n            name: student.name,\r\n            hiragana: student.hiragana,\r\n            gender_id: student.gender_id\r\n          });\r\n        }\r\n        console.log(\"Master student list successfully saved to /students collection.\");\r\n        alert(\"マスター学生リストがFirestoreに保存されました。\");\r\n        this.masterListSaved = true; // 保存済みとマークする / Mark as saved\r\n      } catch (e) {\r\n        console.error(\"Error saving master student list:\", e);\r\n        alert(\"マスター学生リストの保存中にエラーが発生しました。\");\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Firestoreの/studentsコレクションからマスター生徒リストをロードする。 / Loads the master student list from Firestore's /students collection.\r\n     */\r\n    async loadMasterStudentList() {\r\n      if (!auth.currentUser || !this.isFirestoreReady) {\r\n        console.warn(\"Firestore not ready or user not authenticated, cannot load master list.\");\r\n        return;\r\n      }\r\n      const studentsCollectionRef = collection(db, `artifacts/${appId}/students`);\r\n\r\n      try {\r\n        onSnapshot(studentsCollectionRef, (querySnapshot) => {\r\n          const loadedStudents = [];\r\n          const tempStudentMap = new Map();\r\n          querySnapshot.forEach((doc) => {\r\n            const studentData = { id: parseInt(doc.id), ...doc.data() };\r\n            loadedStudents.push(studentData);\r\n            tempStudentMap.set(studentData.id, studentData);\r\n          });\r\n          this.masterStudentList = loadedStudents;\r\n          this.allStudentsMap = tempStudentMap; // ルックアップ用にマップを更新 / Update the map for lookups\r\n          console.log(\"Master student list loaded from Firestore.\");\r\n          if (loadedStudents.length > 0) {\r\n            this.masterListSaved = true;\r\n          }\r\n        }, (error) => {\r\n          console.error(\"Error listening to master student list from Firestore:\", error);\r\n        });\r\n\r\n      } catch (e) {\r\n        console.error(\"Error setting up master student list listener:\", e);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Fisher-Yatesアルゴリズムを使用して配列をシャッフルする。 / Shuffles an array using the Fisher-Yates algorithm.\r\n     * @param {Array} array - シャッフルする配列。 / The array to shuffle.\r\n     * @returns {Array} シャッフルされた配列。 / The shuffled array.\r\n     */\r\n    shuffleArray(array) {\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n      }\r\n      return array;\r\n    },\r\n\r\n    /**\r\n     * 生徒を固定された数の座席（9）に割り当て、空のスロットを埋める。 / Assigns students to a fixed number of desks (9), padding with empty slots.\r\n     * このメソッドは、事前に座席番号が割り当てられている可能性のある生徒のリストを期待する。 / This method expects a list of students with potentially pre-assigned deskNumbers.\r\n     * @param {Array} studentList - 生徒オブジェクトのリスト（deskNumberがある場合とない場合）。 / The list of student objects (with or without deskNumber).\r\n     * @returns {Object} deskLayoutと更新されたstudentsWithDeskNumbersを含むオブジェクト。 / An object containing deskLayout and updated studentsWithDeskNumbers.\r\n     */\r\n    assignStudentsToDesks(studentList) {\r\n      const numDesks = 9;\r\n      const desks = Array.from({ length: numDesks }, (_, i) => ({\r\n        id: `desk-${i + 1}`,\r\n        name: `${i + 1}`,\r\n        students: []\r\n      }));\r\n\r\n      // deskNumberを修正するためにstudentListの作業用コピーを作成する / Create a working copy of studentList to modify deskNumber\r\n      const studentsToAssign = studentList.map(s => ({ ...s })); \r\n      \r\n      // ステップ1: 事前に割り当てられた生徒を座席番号ごとにグループ化して配置する / Step 1: Place pre-assigned students first, grouped by desk number.\r\n      const preAssignedStudentsMap = new Map();\r\n      studentsToAssign.forEach(student => {\r\n        if (student.deskNumber && !student.isEmpty) { // 空のプレースホルダーではないことを確認する / Ensure it's not an empty placeholder\r\n          if (!preAssignedStudentsMap.has(student.deskNumber)) {\r\n            preAssignedStudentsMap.set(student.deskNumber, []);\r\n          }\r\n          preAssignedStudentsMap.get(student.deskNumber).push(student);\r\n        }\r\n      });\r\n\r\n      // 配置された生徒を追跡する / Track students that have been placed\r\n      const placedStudentIds = new Set();\r\n      \r\n      // 事前に割り当てられた生徒を座席配列に配置する / Place pre-assigned students into the desks array\r\n      preAssignedStudentsMap.forEach((studentsAtDesk, deskNumber) => {\r\n        const deskIndex = deskNumber - 1; // 座席番号を配列インデックスに変換 / Convert desk number to array index\r\n        if (desks[deskIndex]) {\r\n          // 座席に最大2人の生徒を配置する / Place up to 2 students at the desk\r\n          for (let k = 0; k < Math.min(studentsAtDesk.length, 2); k++) {\r\n            desks[deskIndex].students.push(studentsAtDesk[k]);\r\n            placedStudentIds.add(studentsAtDesk[k].id);\r\n          }\r\n        }\r\n      });\r\n\r\n      // ステップ2: まだ配置されていないすべての生徒を取得する / Step 2: Get all students who have not been placed yet (from original list).\r\n      const unassignedStudents = studentsToAssign.filter(s => !placedStudentIds.has(s.id));\r\n      let unassignedIndex = 0;\r\n\r\n      // ステップ3: 残りの空のスロットを未割り当ての生徒で埋める / Step 3: Fill any remaining empty slots with unassigned students.\r\n      desks.forEach(desk => {\r\n        while (desk.students.length < 2) {\r\n          if (unassignedIndex < unassignedStudents.length) {\r\n            const student = unassignedStudents[unassignedIndex++];\r\n            student.deskNumber = parseInt(desk.name); // 未割り当ての生徒に座席番号を割り当てる / Assign desk number to the unassigned student\r\n            desk.students.push(student);\r\n            placedStudentIds.add(student.id); // 配置済みとマークする / Mark as placed\r\n          } else {\r\n            // これ以上生徒がいない場合は、空のプレースホルダーを追加する / Add empty placeholder if there are no more students\r\n            desk.students.push({ ...this.emptyStudentPlaceholder, id: `empty-${desk.name}-${desk.students.length + 1}` });\r\n          }\r\n        }\r\n      });\r\n\r\n      // ステップ4: 保存用の最終的な更新済みリストを作成する / Step 4: Create the final updated list for saving.\r\n      const studentsWithDeskNumbers = desks.flatMap(desk => \r\n        desk.students.filter(s => !s.isEmpty)\r\n      );\r\n\r\n      return {\r\n        deskLayout: desks,\r\n        studentsWithDeskNumbers: studentsWithDeskNumbers\r\n      };\r\n    },\r\n\r\n    /**\r\n     * 指定された属性を持つ新しいタブを追加し、その座席レイアウトを生成する。 / Adds a new tab with specified attributes and generates its desk layout.\r\n     * オプションで、すぐにFirestoreに保存する。 / Optionally saves to Firestore immediately.\r\n     * @param {string} title - 新しいタブのタイトル。 / The title of the new tab.\r\n     * @param {Array} studentsArray - このレイアウトの生徒の順序付きリスト（完全な生徒オブジェクト）。 / The ordered list of students for this layout (full student objects).\r\n     * @param {boolean} autoSave - すぐにFirestoreに保存するかどうか。 / Whether to save to Firestore immediately.\r\n     */\r\n    async addTab(title, studentsArray, autoSave = false) {\r\n      const newTabId = this.tabs.length > 0 ? Math.max(...this.tabs.map(t => t.id)) + 1 : 1;\r\n      const creationDate = new Date().toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' });\r\n      \r\n      // 座席を割り当て、座席番号を持つ更新された生徒のリストを取得する / Assign desks and get the updated list of students with desk numbers\r\n      const { deskLayout, studentsWithDeskNumbers } = this.assignStudentsToDesks(studentsArray);\r\n\r\n      // Firestore用にstudentAssignmentsを準備する（IDと座席番号のみ） / Prepare studentAssignments for Firestore (only IDs and deskNumbers)\r\n      const studentAssignments = studentsWithDeskNumbers.map(s => ({\r\n        studentId: s.id,\r\n        deskNumber: s.deskNumber\r\n      }));\r\n\r\n      const newTab = {\r\n        id: newTabId,\r\n        title: title,\r\n        creationDate: creationDate,\r\n        studentAssignments: studentAssignments, // Firestore用にIDと座席番号のみを保存 / Store only IDs and desk numbers for Firestore\r\n        deskLayout: deskLayout, // ローカル表示用に完全なレイアウトを保存 / Store the full layout for local display\r\n        firestoreDocId: null\r\n      };\r\n\r\n      this.tabs.push(newTab);\r\n      this.tabs.sort((a, b) => a.id - b.id); // タブをIDでソートしておく / Keep tabs sorted by ID\r\n      if (autoSave && this.isFirestoreReady) {\r\n        const docRefId = await this.saveTabToFirestore(newTab);\r\n        newTab.firestoreDocId = docRefId;\r\n      }\r\n    },\r\n\r\n    async randomizeCurrentList() {\r\n      if (!this.currentTab) {\r\n        console.warn(\"No active tab selected. Cannot randomize.\");\r\n        return;\r\n      }\r\n\r\n      // 現在のタブのレイアウトからすべての生徒のコピーを取得する。 / Get a copy of all students from the current tab's layout.\r\n      const studentsToRandomize = this.currentTab.deskLayout.flatMap(desk => \r\n        desk.students.filter(s => !s.isEmpty)\r\n      );\r\n\r\n      // 制約のために既存のすべてのタブから履歴データを取得する。 / Get historical data from all existing tabs for constraints.\r\n      const historicalTabs = this.tabs.filter(tab => tab.id !== this.currentTab.id);\r\n      const { studentsByDesk, deskmates } = this.getHistoricalData(historicalTabs);\r\n\r\n      // 2. 再編成アルゴリズムを実装する。 / 2. Implement the randomization algorithm.\r\n      const availableDesks = Array.from({ length: 9 }, (_, i) => i + 1);\r\n      const newStudentAssignments = [];\r\n      const assignedStudentIds = new Set();\r\n      \r\n      // 始点をランダム化するために生徒をシャッフルする / Shuffle the students to randomize the starting point\r\n      this.shuffleArray(studentsToRandomize);\r\n\r\n      for (const deskNumber of availableDesks) {\r\n        const deskStudents = [];\r\n        while (deskStudents.length < 2 && studentsToRandomize.length > 0) {\r\n          const studentToPlace = this.findValidStudent(\r\n            studentsToRandomize, \r\n            deskNumber, \r\n            deskStudents, \r\n            studentsByDesk, \r\n            deskmates, \r\n            assignedStudentIds\r\n          );\r\n          \r\n          if (studentToPlace) {\r\n            deskStudents.push(studentToPlace);\r\n            assignedStudentIds.add(studentToPlace.id);\r\n            // 利用可能な生徒のプールから生徒を削除する / Remove the student from the pool of available students\r\n            studentsToRandomize.splice(studentsToRandomize.findIndex(s => s.id === studentToPlace.id), 1);\r\n          } else {\r\n            break; // このスロットに適した生徒が見つからない / No valid student found for this slot\r\n          }\r\n        }\r\n      \r\n        // 割り当てられた生徒を新しいリストに追加する / Add the assigned students to the new list.\r\n        deskStudents.forEach(s => {\r\n          if (!s.isEmpty) {\r\n            newStudentAssignments.push({ studentId: s.id, deskNumber: deskNumber });\r\n          }\r\n        });\r\n      }\r\n\r\n      // 3. ローカルに新しい一時的なタブオブジェクトを作成する。 / 3. Create a NEW temporary tab object locally.\r\n      const tempTabId = 'temp-randomized'; // 一時的なタブ用の特別な非数値IDを使用 / Use a special, non-numeric ID for temporary tabs\r\n      const creationDate = new Date().toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' });\r\n      const newTitle = `再編成 ${creationDate}`;\r\n\r\n      // マスターマップからの完全な詳細で生徒オブジェクトを再水和する。 / Rehydrate student objects with full details from the master map.\r\n      const rehydratedStudents = newStudentAssignments.map(assignment => ({\r\n        id: assignment.studentId,\r\n        deskNumber: assignment.deskNumber,\r\n        ...this.allStudentsMap.get(assignment.studentId)\r\n      }));\r\n      \r\n      const { deskLayout, studentsWithDeskNumbers } = this.assignStudentsToDesks(rehydratedStudents);\r\n      \r\n      const newTempTab = {\r\n        id: tempTabId,\r\n        title: newTitle,\r\n        creationDate: creationDate,\r\n        studentAssignments: studentsWithDeskNumbers.map(s => ({ studentId: s.id, deskNumber: s.deskNumber })),\r\n        deskLayout: deskLayout,\r\n        firestoreDocId: null // Firestoreにまだないのでこれはnull / This is null since it's not in Firestore yet\r\n      };\r\n\r\n      // 4. ローカルのタブ配列を更新する。 / 4. Update the local tabs array.\r\n      const existingTempIndex = this.tabs.findIndex(t => t.id === tempTabId);\r\n      if (existingTempIndex !== -1) {\r\n        this.tabs.splice(existingTempIndex, 1);\r\n      }\r\n      \r\n      // 新しい一時的なタブを追加する / Then, add the new temporary tab.\r\n      this.tabs.push(newTempTab);\r\n\r\n      // 5. タブをソートし、新しい一時的なタブをアクティブにする。 / 5. Sort the tabs and make the new temporary tab the active one.\r\n      this.tabs.sort((a, b) => {\r\n        if (a.id === tempTabId) return 1;\r\n        if (b.id === tempTabId) return -1;\r\n        return a.id - b.id; // 他のタブをIDでソートする / Sort other tabs by ID\r\n      });\r\n\r\n      this.activeTabId = tempTabId;\r\n    },\r\n\r\n    /**\r\n     * 履歴的な配置と同級生を考慮して、特定の座席に適した生徒を見つける。 / Finds a valid student for a given desk, considering historical placements and deskmates.\r\n     */\r\n    findValidStudent(allStudents, deskNumber, currentDeskmates, studentsByDesk, deskmates, assignedStudentIds) {\r\n      // 検索順序をランダム化するために生徒をシャッフルする / Shuffle the students to randomize the search order\r\n      const shuffledStudents = this.shuffleArray([...allStudents]);\r\n\r\n      for (const student of shuffledStudents) {\r\n        const studentId = student.id;\r\n        \r\n        // この再編成実行で既に生徒が割り当てられているか確認する / Check if student has already been assigned in this randomization run\r\n        if (assignedStudentIds.has(studentId)) {\r\n          continue;\r\n        }\r\n        \r\n        // ルール1: 既に座ったことがある座席に座ることはできない / Rule 1: Cannot sit at a desk they have already sat at\r\n        const previousDesks = studentsByDesk.get(studentId) || new Set();\r\n        if (previousDesks.has(String(deskNumber))) {\r\n          continue;\r\n        }\r\n        \r\n        // ルール2: 以前の同級生と一緒に座ることはできない / Rule 2: Cannot sit with a former deskmate\r\n        let isValidDeskmate = true;\r\n        const previousDeskmates = deskmates.get(studentId) || new Set();\r\n        for (const deskmate of currentDeskmates) {\r\n          if (previousDeskmates.has(deskmate.id)) {\r\n            isValidDeskmate = false;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        if (isValidDeskmate) {\r\n          return student; // 適した生徒が見つかった！ / Found a valid student!\r\n        }\r\n      }\r\n      \r\n      return null; // 利用可能なすべての生徒をチェックしても適した生徒が見つからない場合 / If no valid student is found after checking all available students\r\n    },\r\n\r\n    /**\r\n     * 現在アクティブなタブのレイアウトを新しいタブとして保存する。 / Saves the current active tab's layout as a new tab.\r\n     */\r\n    async saveAsNewTab() {\r\n      if (!this.masterStudentList.length > 0) {\r\n        alert(\"まず、マスター学生リストを保存してください。\");\r\n        return;\r\n      }\r\n      \r\n      const studentsToSave = this.currentTab \r\n        ? this.currentTab.deskLayout.flatMap(desk => desk.students.filter(s => !s.isEmpty))\r\n        : [...this.masterStudentList]; // 現在のタブが選択されていない場合はマスターリストをベースにする / Use master list if no current tab selected\r\n\r\n      const newTitle = `${this.convertToKanji(this.tabs.length)} 第`;\r\n\r\n      await this.addTab(newTitle, studentsToSave, true);\r\n      this.selectTab(this.tabs[this.tabs.length - 1].id);\r\n    },\r\n\r\n    /**\r\n     * IDでタブを選択する。 / Selects a tab by its ID.\r\n     * @param {number} id - 選択するタブのID。 / The ID of the tab to select.\r\n     */\r\n    selectTab(id) {\r\n      this.activeTabId = id;\r\n    },\r\n\r\n    /**\r\n     * タブのデータをFirestoreに保存する。 / Saves a tab's data to Firestore.\r\n     * @param {Object} tabData - 保存するタブオブジェクト。 / The tab object to save.\r\n     * @param {string} [docId] - オプションのFirestoreドキュメントID。指定しない場合は新しく生成される。 / Optional Firestore document ID. If not provided, a new one is generated.\r\n     * @returns {string} FirestoreドキュメントID。 / The Firestore document ID.\r\n     */\r\n    async saveTabToFirestore(tabData, docId = null) {\r\n      if (!auth.currentUser || !this.isFirestoreReady) { \r\n        console.warn(\"Firestore not ready or user not authenticated, cannot save.\");\r\n        return null;\r\n      }\r\n      const collectionRef = collection(db, `artifacts/${appId}/classrooms`);\r\n\r\n      try {\r\n        let docRef;\r\n        if (docId) {\r\n          docRef = doc(collectionRef, docId);\r\n        } else {\r\n          docRef = doc(collectionRef); \r\n          tabData.id = docRef.id; \r\n        }\r\n\r\n        await setDoc(docRef, {\r\n          title: tabData.title,\r\n          creationDate: tabData.creationDate,\r\n          studentAssignments: tabData.studentAssignments // 生徒のIDと座席番号のみを保存 / Only save student IDs and their desk numbers\r\n        });\r\n        console.log(\"Classroom layout document successfully written with ID: \", docRef.id);\r\n        return docRef.id;\r\n      } catch (e) {\r\n        console.error(\"Error writing document to Firestore: \", e);\r\n        return null;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Firestoreからタブをリアルタイムでロードし、生徒データを再水和する。 / Loads tabs from Firestore in real-time and rehydrates student data.\r\n     */\r\n    async loadTabsFromFirestore() {\r\n      if (!auth.currentUser || !this.isFirestoreReady) { \r\n        console.warn(\"Firestore not ready or user not authenticated, cannot load tabs.\");\r\n        return;\r\n      }\r\n      const collectionRef = collection(db, `artifacts/${appId}/classrooms`);\r\n\r\n      try {\r\n        onSnapshot(collectionRef, async (querySnapshot) => {\r\n          const loadedTabsData = [];\r\n          const studentIdsToFetch = new Set();\r\n          \r\n          querySnapshot.forEach((doc) => {\r\n            const data = doc.data();\r\n            const assignments = Array.isArray(data.studentAssignments) ? data.studentAssignments : [];\r\n\r\n            assignments.forEach(assignment => {\r\n              if (assignment.studentId) {\r\n                studentIdsToFetch.add(assignment.studentId);\r\n              }\r\n            });\r\n\r\n            loadedTabsData.push({\r\n              id: doc.id,\r\n              title: data.title,\r\n              creationDate: data.creationDate,\r\n              studentAssignments: assignments,\r\n              deskLayout: [],\r\n              firestoreDocId: doc.id\r\n            });\r\n          });\r\n\r\n          const fetchedStudentsMap = new Map();\r\n          if (studentIdsToFetch.size > 0) {\r\n            const studentDocPromises = Array.from(studentIdsToFetch).map(id => \r\n              getDoc(doc(db, `artifacts/${appId}/students`, String(id)))\r\n            );\r\n            const studentDocs = await Promise.all(studentDocPromises);\r\n            studentDocs.forEach(docSnap => {\r\n              if (docSnap.exists()) {\r\n                const studentData = { id: parseInt(docSnap.id), ...docSnap.data() };\r\n                fetchedStudentsMap.set(studentData.id, studentData);\r\n              }\r\n            });\r\n          }\r\n          \r\n          this.tabs = loadedTabsData.map(tab => {\r\n            const rehydratedStudents = tab.studentAssignments.map(assignment => {\r\n              const fullStudentData = fetchedStudentsMap.get(assignment.studentId);\r\n              if (fullStudentData) {\r\n                return {\r\n                  ...fullStudentData,\r\n                  deskNumber: assignment.deskNumber\r\n                };\r\n              }\r\n              return { ...this.emptyStudentPlaceholder, id: `missing-student-${assignment.studentId}` };\r\n            }).filter(s => !s.isEmpty);\r\n            \r\n            const { deskLayout, studentsWithDeskNumbers } = this.assignStudentsToDesks(rehydratedStudents);\r\n            \r\n            return {\r\n              ...tab,\r\n              studentAssignments: studentsWithDeskNumbers.map(s => ({ studentId: s.id, deskNumber: s.deskNumber })),\r\n              deskLayout: deskLayout\r\n            };\r\n          });\r\n\r\n          this.tabs.sort((a, b) => a.id - b.id);\r\n\r\n          if (this.initialLoadComplete && this.tabs.length > 0 && !this.tabs.some(t => t.id === this.activeTabId)) {\r\n            this.activeTabId = this.tabs[0].id;\r\n          } else if (this.tabs.length > 0 && !this.activeTabId) {\r\n            this.activeTabId = this.tabs[0].id;\r\n          } else if (this.tabs.length === 0) {\r\n            this.activeTabId = null;\r\n          }\r\n          console.log(\"Tabs loaded/updated from Firestore.\");\r\n        }, (error) => {\r\n          console.error(\"Error listening to tabs from Firestore:\", error);\r\n        });\r\n      } catch (e) {\r\n        console.error(\"Error setting up Firestore listener:\", e);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * タブが1つもないかを確認する。ない場合は、初期の「基本順序」タブを作成する。 / Checks if there are any tabs. If not, creates the initial \"Current State\" tab.\r\n     */\r\n    addInitialTabs() {\r\n      if (this.tabs.length === 0 && this.masterStudentList.length > 0) {\r\n        console.log(\"No classroom tabs found. Creating initial layouts.\");\r\n        \r\n        this.addTab('基本順序', [...this.masterStudentList], true); // 自動保存する / true for auto-save\r\n        \r\n      }\r\n    },\r\n\r\n    /**\r\n     * 既存のタブから以前の座席とペアの割り当てをすべて取得する。 / Retrieves all previous desk and deskmate assignments from existing tabs.\r\n     * @returns {Object} 2つのMapを含むオブジェクト: / An object containing two Maps:\r\n     * - studentsByDesk: { studentId: Set<deskNumber> }\r\n     * - deskmates: { studentId: Set<deskmateId> }\r\n     */\r\n    getHistoricalData(tabsArray = this.tabs) {\r\n      const studentsByDesk = new Map();\r\n      const deskmates = new Map();\r\n\r\n      tabsArray.forEach(tab => {\r\n        tab.deskLayout.forEach(desk => {\r\n          const studentIds = desk.students.map(s => s.id).filter(id => id !== 'empty-slot');\r\n          \r\n          studentIds.forEach(studentId => {\r\n            if (!studentsByDesk.has(studentId)) {\r\n              studentsByDesk.set(studentId, new Set());\r\n            }\r\n            studentsByDesk.get(studentId).add(desk.name);\r\n          });\r\n\r\n          if (studentIds.length === 2) {\r\n            const [student1, student2] = studentIds;\r\n            if (!deskmates.has(student1)) {\r\n              deskmates.set(student1, new Set());\r\n            }\r\n            if (!deskmates.has(student2)) {\r\n              deskmates.set(student2, new Set());\r\n            }\r\n            deskmates.get(student1).add(student2);\r\n            deskmates.get(student2).add(student1);\r\n          }\r\n        });\r\n      });\r\n\r\n      return { studentsByDesk, deskmates };\r\n    },\r\n      \r\n    convertToKanji(num){\r\n      const kanjiMap = [\r\n        '零', '一', '二', '三', '四', '五', '六', '七', '八', '九',\r\n        '十', '十一', '十二', '十三', '十四', '十五', '十六', '十七', '十八', '十九'\r\n      ];\r\n      if (num >= 0 && num < kanjiMap.length) {\r\n        return kanjiMap[num];\r\n      } else {\r\n        return num.toString();\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* スタイルは変更されていないため、コメントは不要です。 / Styles have not been changed, so comments are not necessary. */\r\n.classroom-manager {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  font-family: sans-serif;\r\n  min-width: 320px;\r\n}\r\n\r\nh1 {\r\n  margin-bottom: 30px;\r\n  color: #333;\r\n}\r\n\r\n.tabs-container {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  justify-content: center;\r\n  max-width: 100%;\r\n}\r\n\r\n.tabs-container button {\r\n  padding: 8px 15px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  background-color: #f0f0f0;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.tabs-container button:hover:not(.active-tab) {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.tabs-container button.active-tab {\r\n  background-color: #007bff;\r\n  color: white;\r\n  border-color: #007bff;\r\n  font-weight: bold;\r\n}\r\n\r\n.tabs-container button:disabled {\r\n  opacity: 0.6;\r\n  cursor: not-allowed;\r\n  background-color: #f8f9fa;\r\n  color: #6c757d;\r\n}\r\n\r\n.loading-message {\r\n  margin-top: 50px;\r\n  font-style: italic;\r\n  color: #666;\r\n}\r\n</style>","<template>\r\n  <div class=\"my-classroom\">\r\n    <h2>{{ classroomTitle }}</h2>\r\n    <div class=\"whiteboard\"></div>\r\n    <div class=\"desks-container\">\r\n      <div\r\n        class=\"desk-row\"\r\n        v-for=\"(row, rowIndex) in deskRows\"\r\n        :key=\"rowIndex\"\r\n      >\r\n        <StudentDesk\r\n          v-for=\"(desk, deskIndex) in row\"\r\n          :key=\"desk.id || deskIndex\"\r\n          :deskName=\"desk.name\"\r\n          :students=\"desk.students\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport StudentDesk from './StudentDesk.vue';\r\n\r\nexport default {\r\n  name: 'MyClassroom',\r\n  components: {\r\n    StudentDesk\r\n  },\r\n  props: {\r\n    desks: { // 親コンポーネントから座席の配列を受け取るプロパティ。 / A prop that receives an array of desks from the parent component.\r\n      type: Array,\r\n      default: () => [] // デフォルトは空の配列。 / Defaults to an empty array.\r\n    },\r\n    classroomTitle: { // 親コンポーネントから教室のタイトルを受け取るプロパティ。 / A prop that receives the classroom's title from the parent component.\r\n      type: String,\r\n      default: '教室のレイアウト' // デフォルト値。 / A default value is set.\r\n    }\r\n  },\r\n  computed: {\r\n    /**\r\n     * `desks`プロパティから座席を2つずつの行に分割して返す計算プロパティ。 / A computed property that splits the desks from the `desks` prop into rows of two.\r\n     * これにより、UIのレイアウトが簡素化される。 / This simplifies the layout for the UI.\r\n     * @returns {Array} 2つずつに分割された座席の配列。 / An array of desk arrays, each containing two desks.\r\n     */\r\n    deskRows() {\r\n      const rows = [];\r\n      const desksToProcess = this.desks; // プロパティを直接使用する。 / Use the prop directly.\r\n      for (let i = 0; i < desksToProcess.length; i += 2) {\r\n        rows.push(desksToProcess.slice(i, i + 2));\r\n      }\r\n      return rows;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* スタイルはレイアウトの表示を担当する。 / Styles are responsible for displaying the layout. */\r\n.my-classroom {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  font-family: sans-serif;\r\n  min-width: 320px;\r\n}\r\n\r\nh2 {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.whiteboard {\r\n  width: 80%;\r\n  height:3px;\r\n  background-color: #eee;\r\n  border: 2px solid #000;\r\n  margin-bottom: 30px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.5em;\r\n  font-weight: bold;\r\n}\r\n\r\n.desks-container {\r\n  width: 100%;\r\n  max-width: 420px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n}\r\n\r\n.desk-row {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  flex-wrap: nowrap;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n</style>","<template>\r\n  <div class=\"desk\" :class=\"{ 'single-student-desk': students.length === 1 && students[0].isEmpty === false }\">\r\n    <div\r\n      class=\"student\"\r\n      v-for=\"student in students\"\r\n      :key=\"student.id\"\r\n      @click=\"!student.isEmpty ? toggleStudentInfo(student.id) : null\"\r\n      :class=\"['gender-' + student.gender_id, { 'is-empty': student.isEmpty }]\"\r\n    >\r\n      <div v-if=\"student.isEmpty\" class=\"empty-chair-placeholder\">\r\n        </div>\r\n      <div v-else-if=\"selectedStudentId === student.id\" class=\"student-info-details\">\r\n        <p><strong>{{ student.name }}</strong> </p>\r\n        <p>{{ student.hiragana }}</p>\r\n      </div>\r\n      <div\r\n        v-else\r\n        class=\"student-initial\"\r\n        :class=\"{ 'font-small': student.name.length > 3 }\"\r\n      >\r\n        {{ student.name }}\r\n      </div>\r\n    </div>\r\n    <div class=\"desk-name\">{{ deskName }}</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'StudentDesk', // コンポーネントの名前を定義する。 / Defines the component's name.\r\n  props: {\r\n    deskName: { // 座席の番号または名前を受け取るプロパティ。 / A prop that receives the desk's number or name.\r\n      type: String,\r\n      required: true // このプロパティは必須。 / This prop is required.\r\n    },\r\n    students: { // 座席に座っている生徒の配列を受け取るプロパティ。 / A prop that receives an array of students at the desk.\r\n      type: Array,\r\n      default: () => [] // デフォルトは空の配列。 / Defaults to an empty array.\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      selectedStudentId: null // 詳細を表示するために現在選択されている生徒のIDを追跡する。 / Tracks the ID of the currently selected student to display their details.\r\n    };\r\n  },\r\n  methods: {\r\n    /**\r\n     * 生徒のクリックを処理し、詳細情報の表示を切り替えるメソッド。 / A method that handles a student's click and toggles the display of their detailed information.\r\n     * @param {number} id - クリックされた生徒のID。 / The ID of the clicked student.\r\n     */\r\n    toggleStudentInfo(id) {\r\n      // 選択されたIDが現在のIDと同じであればnullにリセットし、そうでなければ新しいIDに設定する。 / If the selected ID is the same as the current ID, reset it to null; otherwise, set it to the new ID.\r\n      this.selectedStudentId = this.selectedStudentId === id ? null : id;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* スタイルは座席と生徒の表示を制御する。 / Styles control the display of the desk and students. */\r\n.desk {\r\n  display: flex;\r\n  justify-content: center; /* デフォルト：生徒を中央に配置 / Default: centers students */\r\n  align-items: center;\r\n  width: 150px;\r\n  height: 100px;\r\n  border: 2px solid #333;\r\n  border-radius: 8px;\r\n  position: relative;\r\n  margin: 10px 30px; \r\n}\r\n\r\n/* 1人の「実際の」生徒がいる座席に適用されるスタイル。生徒を左に配置する。 / Style applied to desks with one *actual* student. It aligns the student to the left. */\r\n.desk.single-student-desk {\r\n  justify-content: flex-start; /* コンテンツを左に配置する / Aligns content to the left */\r\n  padding-left: 15px; /* ボーダーに触れないようにパディングを追加する / Add some padding to prevent it from touching the border */\r\n}\r\n\r\n.student {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 70px;\r\n  height: 70px;\r\n  background-color: #f0f0f0;\r\n  border: 1px solid #ccc;\r\n  border-radius: 50%;\r\n  margin: 0 10px;\r\n  font-weight: bold;\r\n  font-size: 1em;\r\n  position: relative;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  padding: 2px;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* 空の座席用のスタイル / Styles for empty chairs */\r\n.student.is-empty {\r\n  background-color: #e9ecef; /* 明るい背景色 / Lighter background */\r\n  border-style: dashed; /* 破線ボーダー / Dashed border */\r\n  border-color: #adb5bd; /* グレーのボーダー / Grayer border */\r\n  cursor: not-allowed; /* 禁止カーソル / No-entry cursor */\r\n  opacity: 0.7; /* 少し透明にする / Slightly faded */\r\n  pointer-events: none; /* クリックイベントを無効にする / Disables click events */\r\n}\r\n\r\n.student:hover:not(.is-empty) { /* 空でない場合にのみホバーを適用する / Apply hover only if not empty */\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n/* 性別ごとのホバー時の光彩（空でない場合のみ） / Gender-specific hover glow, only if not empty */\r\n.student.gender-1:hover:not(.is-empty) {\r\n  box-shadow: 0 0 15px 5px rgb(190, 213, 236); \r\n}\r\n\r\n.student.gender-2:hover:not(.is-empty) {\r\n  box-shadow: 0 0 15px 5px rgba(221, 151, 138, 0.81);\r\n}\r\n\r\n.empty-chair-placeholder {\r\n  font-size: 0.6em;\r\n  color: #6c757d;\r\n}\r\n\r\n.student-initial {\r\n  text-align: center;\r\n}\r\n\r\n.student-initial.font-small {\r\n  font-size: 0.8em;\r\n}\r\n\r\n.student-info-details {\r\n  font-size: 0.7em;\r\n  font-weight: normal;\r\n  line-height: 1.2;\r\n  word-break: break-all;\r\n}\r\n\r\n.student-info-details p {\r\n  margin: 0;\r\n}\r\n\r\n.desk-name {\r\n  position: absolute;\r\n  bottom: -20px;\r\n  font-size: 0.8em;\r\n  color: #555;\r\n}\r\n</style>","import { render } from \"./StudentDesk.vue?vue&type=template&id=139845cd&scoped=true\"\nimport script from \"./StudentDesk.vue?vue&type=script&lang=js\"\nexport * from \"./StudentDesk.vue?vue&type=script&lang=js\"\n\nimport \"./StudentDesk.vue?vue&type=style&index=0&id=139845cd&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-139845cd\"]])\n\nexport default __exports__","import { render } from \"./MyClassroom.vue?vue&type=template&id=ba4df9a4&scoped=true\"\nimport script from \"./MyClassroom.vue?vue&type=script&lang=js\"\nexport * from \"./MyClassroom.vue?vue&type=script&lang=js\"\n\nimport \"./MyClassroom.vue?vue&type=style&index=0&id=ba4df9a4&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-ba4df9a4\"]])\n\nexport default __exports__","// src/firebase-init.js\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\n\r\n// Conditionally use global Canvas variables or .env variables\r\nconst firebaseConfig = typeof __firebase_config !== 'undefined'\r\n  ? JSON.parse(__firebase_config)\r\n  : {\r\n      apiKey: process.env.VUE_APP_FIREBASE_API_KEY,\r\n      authDomain: process.env.VUE_APP_FIREBASE_AUTH_DOMAIN,\r\n      projectId: process.env.VUE_APP_FIREBASE_PROJECT_ID,\r\n      storageBucket: process.env.VUE_APP_FIREBASE_STORAGE_BUCKET,\r\n      messagingSenderId: process.env.VUE_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n      appId: process.env.VUE_APP_FIREBASE_APP_ID // This is for client-side use\r\n    };\r\n\r\nconst initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\r\n\r\n// __app_id is primarily for Firestore pathing in Canvas. For local dev,\r\n// you might derive it from projectId or use a hardcoded value if needed.\r\nconst appId = typeof __app_id !== 'undefined' ? __app_id : process.env.VUE_APP_FIREBASE_PROJECT_ID || 'default-local-app-id';\r\n\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\n\r\nlet authReadyPromise = new Promise(resolve => {\r\n  onAuthStateChanged(auth, async (user) => {\r\n    if (user) {\r\n      console.log(\"Firebase authenticated. User ID:\", user.uid);\r\n      resolve(user.uid);\r\n    } else {\r\n      try {\r\n        if (initialAuthToken) {\r\n          await signInWithCustomToken(auth, initialAuthToken);\r\n        } else {\r\n          await signInAnonymously(auth);\r\n        }\r\n        console.log(\"Firebase auth attempt complete.\");\r\n        resolve(auth.currentUser ? auth.currentUser.uid : null);\r\n      } catch (error) {\r\n        console.error(\"Firebase authentication failed:\", error);\r\n        resolve(null);\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\nexport { db, auth, authReadyPromise, appId };\r\n","import { render } from \"./ClassroomManager.vue?vue&type=template&id=853b35cc&scoped=true\"\nimport script from \"./ClassroomManager.vue?vue&type=script&lang=js\"\nexport * from \"./ClassroomManager.vue?vue&type=script&lang=js\"\n\nimport \"./ClassroomManager.vue?vue&type=style&index=0&id=853b35cc&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-853b35cc\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=13d21367\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\nimport { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkclass_room\"] = self[\"webpackChunkclass_room\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(1121); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createBlock","_component_ClassroomManager","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","tabs","tab","key","id","onClick","$event","$options","selectTab","_normalizeClass","activeTabId","title","creationDate","_hoisted_3","_cache","args","randomizeCurrentList","saveAsNewTab","disabled","currentTab","_hoisted_4","currentDeskLayout","length","initialLoadComplete","_component_MyClassroom","desks","classroomTitle","_hoisted_5","_toDisplayString","$props","deskRows","row","rowIndex","desk","deskIndex","_component_StudentDesk","deskName","name","students","isEmpty","student","gender_id","toggleStudentInfo","selectedStudentId","hiragana","props","type","String","required","Array","default","data","methods","this","__exports__","components","StudentDesk","computed","rows","desksToProcess","i","push","slice","firebaseConfig","__firebase_config","JSON","parse","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","initialAuthToken","__initial_auth_token","__app_id","app","initializeApp","auth","getAuth","db","getFirestore","authReadyPromise","Promise","resolve","onAuthStateChanged","async","user","console","log","uid","signInWithCustomToken","signInAnonymously","currentUser","error","MyClassroom","masterStudentList","allStudentsMap","Map","emptyStudentPlaceholder","isFirestoreReady","masterListSaved","c1List","c2List","c3List","created","loadMasterStudentList","initializeDefaultMasterStudentList","forEach","set","loadTabsFromFirestore","find","deskLayout","saveMasterStudentListInit","warn","alert","studentsCollectionRef","collection","setDoc","doc","e","onSnapshot","querySnapshot","loadedStudents","tempStudentMap","studentData","parseInt","shuffleArray","array","j","Math","floor","random","assignStudentsToDesks","studentList","numDesks","from","_","studentsToAssign","map","s","preAssignedStudentsMap","deskNumber","has","get","placedStudentIds","Set","studentsAtDesk","k","min","add","unassignedStudents","filter","unassignedIndex","studentsWithDeskNumbers","flatMap","addTab","studentsArray","autoSave","newTabId","max","t","Date","toLocaleDateString","year","month","day","studentAssignments","studentId","newTab","firestoreDocId","sort","a","b","docRefId","saveTabToFirestore","studentsToRandomize","historicalTabs","studentsByDesk","deskmates","getHistoricalData","availableDesks","newStudentAssignments","assignedStudentIds","deskStudents","studentToPlace","findValidStudent","splice","findIndex","tempTabId","newTitle","rehydratedStudents","assignment","newTempTab","existingTempIndex","allStudents","currentDeskmates","shuffledStudents","previousDesks","isValidDeskmate","previousDeskmates","deskmate","studentsToSave","convertToKanji","tabData","docId","collectionRef","docRef","loadedTabsData","studentIdsToFetch","assignments","isArray","fetchedStudentsMap","size","studentDocPromises","getDoc","studentDocs","all","docSnap","exists","fullStudentData","some","addInitialTabs","tabsArray","studentIds","student1","student2","num","kanjiMap","toString","ClassroomManager","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}